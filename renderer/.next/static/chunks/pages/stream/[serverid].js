/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["pages/stream/[serverid]"],{

/***/ "../node_modules/events/events.js":
/*!****************************************!*\
  !*** ../node_modules/events/events.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/events/events.js\n"));

/***/ }),

/***/ "../node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Flijiahao%2FDesktop%2Flijiahao%2Fmy-git%2FXStreaming-desktop%2Frenderer%2Fpages%2Fstream%2F%5Bserverid%5D.tsx&page=%2Fstream%2F%5Bserverid%5D!":
/*!*************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Flijiahao%2FDesktop%2Flijiahao%2Fmy-git%2FXStreaming-desktop%2Frenderer%2Fpages%2Fstream%2F%5Bserverid%5D.tsx&page=%2Fstream%2F%5Bserverid%5D! ***!
  \*************************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/stream/[serverid]\",\n      function () {\n        return __webpack_require__(/*! ./pages/stream/[serverid].tsx */ \"./pages/stream/[serverid].tsx\");\n      }\n    ]);\n    if(true) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/stream/[serverid]\"])\n      });\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1jbGllbnQtcGFnZXMtbG9hZGVyLmpzP2Fic29sdXRlUGFnZVBhdGg9JTJGVXNlcnMlMkZsaWppYWhhbyUyRkRlc2t0b3AlMkZsaWppYWhhbyUyRm15LWdpdCUyRlhTdHJlYW1pbmctZGVza3RvcCUyRnJlbmRlcmVyJTJGcGFnZXMlMkZzdHJlYW0lMkYlNUJzZXJ2ZXJpZCU1RC50c3gmcGFnZT0lMkZzdHJlYW0lMkYlNUJzZXJ2ZXJpZCU1RCEiLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQyxvRUFBK0I7QUFDdEQ7QUFDQTtBQUNBLE9BQU8sSUFBVTtBQUNqQixNQUFNLFVBQVU7QUFDaEI7QUFDQSxPQUFPO0FBQ1A7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvP2I2YWUiXSwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgKHdpbmRvdy5fX05FWFRfUCA9IHdpbmRvdy5fX05FWFRfUCB8fCBbXSkucHVzaChbXG4gICAgICBcIi9zdHJlYW0vW3NlcnZlcmlkXVwiLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcmVxdWlyZShcIi4vcGFnZXMvc3RyZWFtL1tzZXJ2ZXJpZF0udHN4XCIpO1xuICAgICAgfVxuICAgIF0pO1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdpbmRvdy5fX05FWFRfUC5wdXNoKFtcIi9zdHJlYW0vW3NlcnZlcmlkXVwiXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Flijiahao%2FDesktop%2Flijiahao%2Fmy-git%2FXStreaming-desktop%2Frenderer%2Fpages%2Fstream%2F%5Bserverid%5D.tsx&page=%2Fstream%2F%5Bserverid%5D!\n"));

/***/ }),

/***/ "./lib/ipc.ts":
/*!********************!*\
  !*** ./lib/ipc.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    // on(channel:string, listener){\n    //     ipcRenderer.on(channel, listener)\n    // },\n    send (channel, action) {\n        let data = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n        if (window.XStreaming === undefined) {\n            // Electron API Not available. Lets mock!\n            window.XStreaming = this.websocketFallbackApi();\n        }\n        // console.log('DEBUG:', window.XStreaming)\n        return window.XStreaming.send(channel, action, data);\n    },\n    on (channel, listener) {\n        if (window.XStreaming === undefined) {\n            // Electron API Not available. Lets mock!\n            window.XStreaming = this.websocketFallbackApi();\n        }\n        // console.log('DEBUG', window.XStreaming)\n        return window.XStreaming.on(channel, listener);\n    },\n    onAction (channel, action, listener) {\n        if (window.XStreaming === undefined) {\n            // Electron API Not available. Lets mock!\n            window.XStreaming = this.websocketFallbackApi();\n        }\n        // console.log('DEBUG', window.XStreaming)\n        return window.XStreaming.onAction(channel, action, listener);\n    },\n    removeListener (channel, listener) {\n        if (window.XStreaming === undefined) {\n            // Electron API Not available. Lets mock!\n            window.XStreaming = this.websocketFallbackApi();\n        }\n        // console.log('DEBUG', window.XStreaming)\n        return window.XStreaming.removeListener(channel, listener);\n    }\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvaXBjLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZTtJQUVYLGdDQUFnQztJQUNoQyx3Q0FBd0M7SUFDeEMsS0FBSztJQUVMQSxNQUFLQyxPQUFjLEVBQUVDLE1BQWE7WUFBRUMsT0FBQUEsaUVBQU8sQ0FBQztRQUN4QyxJQUFHQyxPQUFPQyxVQUFVLEtBQUtDLFdBQVU7WUFDL0IseUNBQXlDO1lBQ3pDRixPQUFPQyxVQUFVLEdBQUcsSUFBSSxDQUFDRSxvQkFBb0I7UUFDakQ7UUFFQSwyQ0FBMkM7UUFDM0MsT0FBT0gsT0FBT0MsVUFBVSxDQUFDTCxJQUFJLENBQUNDLFNBQVNDLFFBQVFDO0lBQ25EO0lBRUFLLElBQUdQLE9BQWMsRUFBRVEsUUFBUTtRQUN2QixJQUFHTCxPQUFPQyxVQUFVLEtBQUtDLFdBQVU7WUFDL0IseUNBQXlDO1lBQ3pDRixPQUFPQyxVQUFVLEdBQUcsSUFBSSxDQUFDRSxvQkFBb0I7UUFDakQ7UUFFQSwwQ0FBMEM7UUFDMUMsT0FBT0gsT0FBT0MsVUFBVSxDQUFDRyxFQUFFLENBQUNQLFNBQVNRO0lBQ3pDO0lBRUFDLFVBQVNULE9BQWMsRUFBRUMsTUFBYSxFQUFFTyxRQUFRO1FBQzVDLElBQUdMLE9BQU9DLFVBQVUsS0FBS0MsV0FBVTtZQUMvQix5Q0FBeUM7WUFDekNGLE9BQU9DLFVBQVUsR0FBRyxJQUFJLENBQUNFLG9CQUFvQjtRQUNqRDtRQUVBLDBDQUEwQztRQUMxQyxPQUFPSCxPQUFPQyxVQUFVLENBQUNLLFFBQVEsQ0FBQ1QsU0FBU0MsUUFBUU87SUFDdkQ7SUFFQUUsZ0JBQWVWLE9BQWMsRUFBRVEsUUFBUTtRQUNuQyxJQUFHTCxPQUFPQyxVQUFVLEtBQUtDLFdBQVU7WUFDL0IseUNBQXlDO1lBQ3pDRixPQUFPQyxVQUFVLEdBQUcsSUFBSSxDQUFDRSxvQkFBb0I7UUFDakQ7UUFFQSwwQ0FBMEM7UUFDMUMsT0FBT0gsT0FBT0MsVUFBVSxDQUFDTSxjQUFjLENBQUNWLFNBQVNRO0lBQ3JEO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvaXBjLnRzPzVmODUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgLy8gb24oY2hhbm5lbDpzdHJpbmcsIGxpc3RlbmVyKXtcbiAgICAvLyAgICAgaXBjUmVuZGVyZXIub24oY2hhbm5lbCwgbGlzdGVuZXIpXG4gICAgLy8gfSxcblxuICAgIHNlbmQoY2hhbm5lbDpzdHJpbmcsIGFjdGlvbjpzdHJpbmcsIGRhdGEgPSB7fSl7XG4gICAgICAgIGlmKHdpbmRvdy5YU3RyZWFtaW5nID09PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgLy8gRWxlY3Ryb24gQVBJIE5vdCBhdmFpbGFibGUuIExldHMgbW9jayFcbiAgICAgICAgICAgIHdpbmRvdy5YU3RyZWFtaW5nID0gdGhpcy53ZWJzb2NrZXRGYWxsYmFja0FwaSgpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb25zb2xlLmxvZygnREVCVUc6Jywgd2luZG93LlhTdHJlYW1pbmcpXG4gICAgICAgIHJldHVybiB3aW5kb3cuWFN0cmVhbWluZy5zZW5kKGNoYW5uZWwsIGFjdGlvbiwgZGF0YSlcbiAgICB9LFxuXG4gICAgb24oY2hhbm5lbDpzdHJpbmcsIGxpc3RlbmVyKXtcbiAgICAgICAgaWYod2luZG93LlhTdHJlYW1pbmcgPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICAvLyBFbGVjdHJvbiBBUEkgTm90IGF2YWlsYWJsZS4gTGV0cyBtb2NrIVxuICAgICAgICAgICAgd2luZG93LlhTdHJlYW1pbmcgPSB0aGlzLndlYnNvY2tldEZhbGxiYWNrQXBpKClcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdERUJVRycsIHdpbmRvdy5YU3RyZWFtaW5nKVxuICAgICAgICByZXR1cm4gd2luZG93LlhTdHJlYW1pbmcub24oY2hhbm5lbCwgbGlzdGVuZXIpXG4gICAgfSwgXG5cbiAgICBvbkFjdGlvbihjaGFubmVsOnN0cmluZywgYWN0aW9uOnN0cmluZywgbGlzdGVuZXIpe1xuICAgICAgICBpZih3aW5kb3cuWFN0cmVhbWluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vIEVsZWN0cm9uIEFQSSBOb3QgYXZhaWxhYmxlLiBMZXRzIG1vY2shXG4gICAgICAgICAgICB3aW5kb3cuWFN0cmVhbWluZyA9IHRoaXMud2Vic29ja2V0RmFsbGJhY2tBcGkoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RFQlVHJywgd2luZG93LlhTdHJlYW1pbmcpXG4gICAgICAgIHJldHVybiB3aW5kb3cuWFN0cmVhbWluZy5vbkFjdGlvbihjaGFubmVsLCBhY3Rpb24sIGxpc3RlbmVyKVxuICAgIH0sXG5cbiAgICByZW1vdmVMaXN0ZW5lcihjaGFubmVsOnN0cmluZywgbGlzdGVuZXIpe1xuICAgICAgICBpZih3aW5kb3cuWFN0cmVhbWluZyA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIC8vIEVsZWN0cm9uIEFQSSBOb3QgYXZhaWxhYmxlLiBMZXRzIG1vY2shXG4gICAgICAgICAgICB3aW5kb3cuWFN0cmVhbWluZyA9IHRoaXMud2Vic29ja2V0RmFsbGJhY2tBcGkoKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RFQlVHJywgd2luZG93LlhTdHJlYW1pbmcpXG4gICAgICAgIHJldHVybiB3aW5kb3cuWFN0cmVhbWluZy5yZW1vdmVMaXN0ZW5lcihjaGFubmVsLCBsaXN0ZW5lcilcbiAgICB9LFxufVxuXG4iXSwibmFtZXMiOlsic2VuZCIsImNoYW5uZWwiLCJhY3Rpb24iLCJkYXRhIiwid2luZG93IiwiWFN0cmVhbWluZyIsInVuZGVmaW5lZCIsIndlYnNvY2tldEZhbGxiYWNrQXBpIiwib24iLCJsaXN0ZW5lciIsIm9uQWN0aW9uIiwicmVtb3ZlTGlzdGVuZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./lib/ipc.ts\n"));

/***/ }),

/***/ "./pages/stream/[serverid].tsx":
/*!*************************************!*\
  !*** ./pages/stream/[serverid].tsx ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/router */ \"../node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var xstreaming_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xstreaming-player */ \"../node_modules/xstreaming-player/dist/index.js\");\n/* harmony import */ var xstreaming_player__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xstreaming_player__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_ipc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/ipc */ \"./lib/ipc.ts\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nfunction Stream() {\n    _s();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter)();\n    // const { settings } = useSettings()\n    let streamStateInterval;\n    let keepaliveInterval;\n    const [xPlayer, setxPlayer] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(undefined);\n    const [sessionId, setSessionId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [queueTime, setQueueTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        let streamType = \"home\";\n        let serverId = router.query.serverid;\n        console.log(\"serverId:\", serverId);\n        if (xPlayer !== undefined) {\n            xPlayer.bind();\n            xPlayer.setGamepadKernal(\"Web\");\n            xPlayer.setSdpHandler((client, offer)=>{\n                _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"sendChatSdp\", {\n                    sessionId: sessionId,\n                    sdp: offer.sdp\n                }).then((sdpResponse)=>{\n                    xPlayer.setRemoteOffer(sdpResponse.sdp);\n                }).catch((error)=>{\n                    console.log(\"ChatSDP Exchange error:\", error);\n                    alert(\"ChatSDP Exchange error:\" + JSON.stringify(error));\n                });\n            });\n            xPlayer.createOffer().then((offer)=>{\n                _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"sendSdp\", {\n                    sessionId: sessionId,\n                    sdp: offer.sdp\n                }).then((sdpResult)=>{\n                    xPlayer.setRemoteOffer(sdpResult.sdp);\n                    // Gather candidates\n                    const iceCandidates = xPlayer.getIceCandidates();\n                    const candidates = [];\n                    for(const candidate in iceCandidates){\n                        candidates.push({\n                            candidate: iceCandidates[candidate].candidate,\n                            sdpMLineIndex: iceCandidates[candidate].sdpMLineIndex,\n                            sdpMid: iceCandidates[candidate].sdpMid\n                        });\n                    }\n                    _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"sendIce\", {\n                        sessionId: sessionId,\n                        ice: candidates\n                    }).then((iceResult)=>{\n                        console.log(iceResult);\n                        xPlayer.setIceCandidates(iceResult);\n                    // All done. Waiting for the event 'connectionstate' to be triggered\n                    }).catch((error)=>{\n                        console.log(\"ICE Exchange error:\", error);\n                        alert(\"ICE Exchange error:\" + JSON.stringify(error));\n                    });\n                }).catch((error)=>{\n                    console.log(\"SDP Exchange error:\", error);\n                    alert(\"SDP Exchange error:\" + JSON.stringify(error));\n                });\n            });\n            xPlayer.getEventBus().on(\"connectionstate\", (event)=>{\n                console.log(\"connectionstate changed:\", event);\n                if (event.state === \"connected\") {\n                    // Start keepalive loop\n                    keepaliveInterval = setInterval(()=>{\n                        _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"sendKeepalive\", {\n                            sessionId: sessionId\n                        }).then((result)=>{\n                            console.log(\"StartStream keepalive:\", result);\n                        }).catch((error)=>{\n                            console.error(\"Failed to send keepalive. Error details:\\n\" + JSON.stringify(error));\n                        });\n                    }, 30000);\n                }\n            });\n        } else if (sessionId === \"\") {\n            _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"startStream\", {\n                type: streamType,\n                target: serverId\n            }).then((result)=>{\n                console.log(\"StartStream session:\", result);\n                setSessionId(result);\n            }).catch((error)=>{\n                alert(\"Failed to start new stream. Error details:\\n\" + JSON.stringify(error));\n            });\n        } else {\n            streamStateInterval = setInterval(()=>{\n                _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"getPlayerState\", {\n                    sessionId: sessionId\n                }).then((session)=>{\n                    console.log(\"Player state:\", session);\n                    switch(session.playerState){\n                        case \"pending\":\n                            break;\n                        case \"started\":\n                            // Console is ready\n                            clearInterval(streamStateInterval);\n                            // Start xPlayer interface\n                            setxPlayer(new (xstreaming_player__WEBPACK_IMPORTED_MODULE_3___default())(\"videoHolder\", {\n                                ui_systemui: [],\n                                ui_touchenabled: false,\n                                input_legacykeyboard: true\n                            }));\n                            break;\n                        case \"failed\":\n                            // Error\n                            clearInterval(streamStateInterval);\n                            if (session.errorDetails.code === \"WNSError\" && session.errorDetails.message.includes(\"WaitingForServerToRegister\")) {\n                                // Detected the \"WaitingForServerToRegister\" error. This means the console is not connected to the xbox servers\n                                alert(\"Unable to start stream session on console. The console is not connected to the Xbox servers. This ocasionally happens then there is an update or when the user is not signed in to the console. Please hard reboot your console and try again.\\n\\n\" + \"Stream error result: \" + session.state + \"\\nDetails: [\" + session.errorDetails.code + \"] \" + session.errorDetails.message);\n                            } else {\n                                alert(\"Stream error result: \" + session.state + \"\\nDetails: [\" + session.errorDetails.code + \"] \" + session.errorDetails.message);\n                            }\n                            console.log(\"Full stream error:\", session.errorDetails);\n                            onDisconnect();\n                            xPlayer.close();\n                            break;\n                        case \"queued\":\n                            // Waiting in queue\n                            // @TODO: Show queue position\n                            if (queueTime === 0) {\n                                setQueueTime(session.waitingTimes.estimatedTotalWaitTimeInSeconds);\n                                console.log(\"Setting queue to:\", session.waitingTimes.estimatedTotalWaitTimeInSeconds);\n                            }\n                            break;\n                    }\n                }).catch((error)=>{\n                    alert(\"Failed to get player state. Error details:\\n\" + JSON.stringify(error));\n                });\n            }, 1000);\n        }\n        return ()=>{\n            if (xPlayer !== undefined) {\n                xPlayer.close();\n            }\n            if (keepaliveInterval) {\n                clearInterval(keepaliveInterval);\n            }\n            if (streamStateInterval) {\n                clearInterval(streamStateInterval);\n            }\n        };\n    });\n    function onDisconnect() {\n        _lib_ipc__WEBPACK_IMPORTED_MODULE_4__[\"default\"].send(\"streaming\", \"stopStream\", {\n            sessionId: sessionId\n        }).then((result)=>{\n            console.log(\"Stream stopped:\", result);\n        });\n        if (streamStateInterval) {\n            clearInterval(streamStateInterval);\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            id: \"videoHolder\"\n        }, void 0, false, {\n            fileName: \"/Users/lijiahao/Desktop/lijiahao/my-git/XStreaming-desktop/renderer/pages/stream/[serverid].tsx\",\n            lineNumber: 233,\n            columnNumber: 7\n        }, this)\n    }, void 0, false);\n}\n_s(Stream, \"umBQDojFq3tYNpApBV1J/HoRL5o=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_2__.useRouter\n    ];\n});\n_c = Stream;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Stream);\nvar _c;\n$RefreshReg$(_c, \"Stream\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9zdHJlYW0vW3NlcnZlcmlkXS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQTRDO0FBQ0o7QUFDUztBQUNqQjtBQUVoQyxTQUFTSzs7SUFDUCxNQUFNQyxTQUFTSixzREFBU0E7SUFDeEIscUNBQXFDO0lBRXJDLElBQUlLO0lBQ0osSUFBSUM7SUFFSixNQUFNLENBQUNDLFNBQVNDLFdBQVcsR0FBR1QsK0NBQVFBLENBQUNVO0lBQ3ZDLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHWiwrQ0FBUUEsQ0FBQztJQUMzQyxNQUFNLENBQUNhLFdBQVdDLGFBQWEsR0FBR2QsK0NBQVFBLENBQUM7SUFFM0NELGdEQUFTQSxDQUFDO1FBQ1IsSUFBSWdCLGFBQWE7UUFDakIsSUFBSUMsV0FBV1gsT0FBT1ksS0FBSyxDQUFDQyxRQUFRO1FBRXBDQyxRQUFRQyxHQUFHLENBQUMsYUFBYUo7UUFFekIsSUFBSVIsWUFBWUUsV0FBVztZQUN6QkYsUUFBUWEsSUFBSTtZQUVaYixRQUFRYyxnQkFBZ0IsQ0FBQztZQUV6QmQsUUFBUWUsYUFBYSxDQUFDLENBQUNDLFFBQVFDO2dCQUM3QnRCLHFEQUFRLENBQUMsYUFBYSxlQUFlO29CQUNuQ1EsV0FBV0E7b0JBQ1hnQixLQUFLRixNQUFNRSxHQUFHO2dCQUNoQixHQUNDQyxJQUFJLENBQUMsQ0FBQ0M7b0JBQ0xyQixRQUFRc0IsY0FBYyxDQUFDRCxZQUFZRixHQUFHO2dCQUN4QyxHQUNDSSxLQUFLLENBQUMsQ0FBQ0M7b0JBQ05iLFFBQVFDLEdBQUcsQ0FBQywyQkFBMkJZO29CQUN2Q0MsTUFBTSw0QkFBNEJDLEtBQUtDLFNBQVMsQ0FBQ0g7Z0JBQ25EO1lBQ0Y7WUFFQXhCLFFBQVE0QixXQUFXLEdBQUdSLElBQUksQ0FBQyxDQUFDSDtnQkFDMUJ0QixxREFBUSxDQUFDLGFBQWEsV0FBVztvQkFDL0JRLFdBQVdBO29CQUNYZ0IsS0FBS0YsTUFBTUUsR0FBRztnQkFDaEIsR0FDR0MsSUFBSSxDQUFDLENBQUNTO29CQUNMN0IsUUFBUXNCLGNBQWMsQ0FBQ08sVUFBVVYsR0FBRztvQkFFcEMsb0JBQW9CO29CQUNwQixNQUFNVyxnQkFBZ0I5QixRQUFRK0IsZ0JBQWdCO29CQUM5QyxNQUFNQyxhQUFhLEVBQUU7b0JBQ3JCLElBQUssTUFBTUMsYUFBYUgsY0FBZTt3QkFDckNFLFdBQVdFLElBQUksQ0FBQzs0QkFDZEQsV0FBV0gsYUFBYSxDQUFDRyxVQUFVLENBQUNBLFNBQVM7NEJBQzdDRSxlQUFlTCxhQUFhLENBQUNHLFVBQVUsQ0FBQ0UsYUFBYTs0QkFDckRDLFFBQVFOLGFBQWEsQ0FBQ0csVUFBVSxDQUFDRyxNQUFNO3dCQUN6QztvQkFDRjtvQkFFQXpDLHFEQUFRLENBQUMsYUFBYSxXQUFXO3dCQUMvQlEsV0FBV0E7d0JBQ1hrQyxLQUFLTDtvQkFDUCxHQUNHWixJQUFJLENBQUMsQ0FBQ2tCO3dCQUNMM0IsUUFBUUMsR0FBRyxDQUFDMEI7d0JBQ1p0QyxRQUFRdUMsZ0JBQWdCLENBQUNEO29CQUV6QixvRUFBb0U7b0JBQ3RFLEdBQ0NmLEtBQUssQ0FBQyxDQUFDQzt3QkFDTmIsUUFBUUMsR0FBRyxDQUFDLHVCQUF1Qlk7d0JBQ25DQyxNQUFNLHdCQUF3QkMsS0FBS0MsU0FBUyxDQUFDSDtvQkFDL0M7Z0JBQ0osR0FDQ0QsS0FBSyxDQUFDLENBQUNDO29CQUNOYixRQUFRQyxHQUFHLENBQUMsdUJBQXVCWTtvQkFDbkNDLE1BQU0sd0JBQXdCQyxLQUFLQyxTQUFTLENBQUNIO2dCQUMvQztZQUNKO1lBRUF4QixRQUFRd0MsV0FBVyxHQUFHQyxFQUFFLENBQUMsbUJBQW1CLENBQUNDO2dCQUMzQy9CLFFBQVFDLEdBQUcsQ0FBQyw0QkFBNEI4QjtnQkFFeEMsSUFBSUEsTUFBTUMsS0FBSyxLQUFLLGFBQWE7b0JBQy9CLHVCQUF1QjtvQkFDdkI1QyxvQkFBb0I2QyxZQUFZO3dCQUM5QmpELHFEQUFRLENBQUMsYUFBYSxpQkFBaUI7NEJBQ3JDUSxXQUFXQTt3QkFDYixHQUNHaUIsSUFBSSxDQUFDLENBQUN5Qjs0QkFDTGxDLFFBQVFDLEdBQUcsQ0FBQywwQkFBMEJpQzt3QkFDeEMsR0FDQ3RCLEtBQUssQ0FBQyxDQUFDQzs0QkFDTmIsUUFBUWEsS0FBSyxDQUNYLCtDQUNFRSxLQUFLQyxTQUFTLENBQUNIO3dCQUVyQjtvQkFDSixHQUFHO2dCQUNMO1lBQ0Y7UUFDRixPQUFPLElBQUlyQixjQUFjLElBQUk7WUFDM0JSLHFEQUFRLENBQUMsYUFBYSxlQUFlO2dCQUNuQ21ELE1BQU12QztnQkFDTndDLFFBQVF2QztZQUNWLEdBQ0dZLElBQUksQ0FBQyxDQUFDeUI7Z0JBQ0xsQyxRQUFRQyxHQUFHLENBQUMsd0JBQXdCaUM7Z0JBQ3BDekMsYUFBYXlDO1lBQ2YsR0FDQ3RCLEtBQUssQ0FBQyxDQUFDQztnQkFDTkMsTUFDRSxpREFDRUMsS0FBS0MsU0FBUyxDQUFDSDtZQUVyQjtRQUNKLE9BQU87WUFDTDFCLHNCQUFzQjhDLFlBQVk7Z0JBQ2hDakQscURBQVEsQ0FBQyxhQUFhLGtCQUFrQjtvQkFDdENRLFdBQVdBO2dCQUNiLEdBQ0dpQixJQUFJLENBQUMsQ0FBQzRCO29CQUNMckMsUUFBUUMsR0FBRyxDQUFDLGlCQUFpQm9DO29CQUU3QixPQUFRQSxRQUFRQyxXQUFXO3dCQUN6QixLQUFLOzRCQUVIO3dCQUVGLEtBQUs7NEJBQ0gsbUJBQW1COzRCQUNuQkMsY0FBY3BEOzRCQUVkLDBCQUEwQjs0QkFDMUJHLFdBQ0UsSUFBSVAsMERBQWdCQSxDQUFDLGVBQWU7Z0NBQ2xDeUQsYUFBYSxFQUFFO2dDQUNmQyxpQkFBaUI7Z0NBQ2pCQyxzQkFBc0I7NEJBQ3hCOzRCQUVGO3dCQUVGLEtBQUs7NEJBQ0gsUUFBUTs0QkFDUkgsY0FBY3BEOzRCQUVkLElBQ0VrRCxRQUFRTSxZQUFZLENBQUNDLElBQUksS0FBSyxjQUM5QlAsUUFBUU0sWUFBWSxDQUFDRSxPQUFPLENBQUNDLFFBQVEsQ0FDbkMsK0JBRUY7Z0NBQ0EsK0dBQStHO2dDQUMvR2hDLE1BQ0UsdVBBQ0UsMEJBQ0F1QixRQUFRTCxLQUFLLEdBQ2IsaUJBQ0FLLFFBQVFNLFlBQVksQ0FBQ0MsSUFBSSxHQUN6QixPQUNBUCxRQUFRTSxZQUFZLENBQUNFLE9BQU87NEJBRWxDLE9BQU87Z0NBQ0wvQixNQUNFLDBCQUNFdUIsUUFBUUwsS0FBSyxHQUNiLGlCQUNBSyxRQUFRTSxZQUFZLENBQUNDLElBQUksR0FDekIsT0FDQVAsUUFBUU0sWUFBWSxDQUFDRSxPQUFPOzRCQUVsQzs0QkFDQTdDLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0JvQyxRQUFRTSxZQUFZOzRCQUN0REk7NEJBQ0ExRCxRQUFRMkQsS0FBSzs0QkFDYjt3QkFFRixLQUFLOzRCQUNILG1CQUFtQjs0QkFDbkIsNkJBQTZCOzRCQUM3QixJQUFJdEQsY0FBYyxHQUFHO2dDQUNuQkMsYUFDRTBDLFFBQVFZLFlBQVksQ0FBQ0MsK0JBQStCO2dDQUV0RGxELFFBQVFDLEdBQUcsQ0FDVCxxQkFDQW9DLFFBQVFZLFlBQVksQ0FBQ0MsK0JBQStCOzRCQUV4RDs0QkFDQTtvQkFDSjtnQkFDRixHQUNDdEMsS0FBSyxDQUFDLENBQUNDO29CQUNOQyxNQUNFLGlEQUNFQyxLQUFLQyxTQUFTLENBQUNIO2dCQUVyQjtZQUNKLEdBQUc7UUFDTDtRQUVBLE9BQU87WUFDTCxJQUFJeEIsWUFBWUUsV0FBVztnQkFDekJGLFFBQVEyRCxLQUFLO1lBQ2Y7WUFFQSxJQUFJNUQsbUJBQW1CO2dCQUNyQm1ELGNBQWNuRDtZQUNoQjtZQUVBLElBQUlELHFCQUFxQjtnQkFDdkJvRCxjQUFjcEQ7WUFDaEI7UUFDRjtJQUNGO0lBRUEsU0FBUzREO1FBQ1AvRCxxREFBUSxDQUFDLGFBQWEsY0FBYztZQUNsQ1EsV0FBV0E7UUFDYixHQUFHaUIsSUFBSSxDQUFDLENBQUN5QjtZQUNQbEMsUUFBUUMsR0FBRyxDQUFDLG1CQUFtQmlDO1FBQ2pDO1FBRUEsSUFBSS9DLHFCQUFxQjtZQUN2Qm9ELGNBQWNwRDtRQUNoQjtJQUNGO0lBRUEscUJBQ0U7a0JBQ0UsNEVBQUNnRTtZQUFJQyxJQUFHOzs7Ozs7O0FBR2Q7R0F0T1NuRTs7UUFDUUgsa0RBQVNBOzs7S0FEakJHO0FBd09ULGlFQUFlQSxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3BhZ2VzL3N0cmVhbS9bc2VydmVyaWRdLnRzeD80OWZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZVJvdXRlciB9IGZyb20gXCJuZXh0L3JvdXRlclwiO1xuaW1wb3J0IHhTdHJlYW1pbmdQbGF5ZXIgZnJvbSBcInhzdHJlYW1pbmctcGxheWVyXCI7XG5pbXBvcnQgSXBjIGZyb20gXCIuLi8uLi9saWIvaXBjXCI7XG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgY29uc3Qgcm91dGVyID0gdXNlUm91dGVyKCk7XG4gIC8vIGNvbnN0IHsgc2V0dGluZ3MgfSA9IHVzZVNldHRpbmdzKClcblxuICBsZXQgc3RyZWFtU3RhdGVJbnRlcnZhbDtcbiAgbGV0IGtlZXBhbGl2ZUludGVydmFsO1xuXG4gIGNvbnN0IFt4UGxheWVyLCBzZXR4UGxheWVyXSA9IHVzZVN0YXRlKHVuZGVmaW5lZCk7XG4gIGNvbnN0IFtzZXNzaW9uSWQsIHNldFNlc3Npb25JZF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgY29uc3QgW3F1ZXVlVGltZSwgc2V0UXVldWVUaW1lXSA9IHVzZVN0YXRlKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHN0cmVhbVR5cGUgPSBcImhvbWVcIjtcbiAgICBsZXQgc2VydmVySWQgPSByb3V0ZXIucXVlcnkuc2VydmVyaWQ7XG5cbiAgICBjb25zb2xlLmxvZygnc2VydmVySWQ6Jywgc2VydmVySWQpXG5cbiAgICBpZiAoeFBsYXllciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB4UGxheWVyLmJpbmQoKTtcblxuICAgICAgeFBsYXllci5zZXRHYW1lcGFkS2VybmFsKCdXZWInKVxuXG4gICAgICB4UGxheWVyLnNldFNkcEhhbmRsZXIoKGNsaWVudCwgb2ZmZXIpID0+IHtcbiAgICAgICAgSXBjLnNlbmQoXCJzdHJlYW1pbmdcIiwgXCJzZW5kQ2hhdFNkcFwiLCB7XG4gICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uSWQsXG4gICAgICAgICAgc2RwOiBvZmZlci5zZHAsXG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChzZHBSZXNwb25zZSkgPT4ge1xuICAgICAgICAgIHhQbGF5ZXIuc2V0UmVtb3RlT2ZmZXIoc2RwUmVzcG9uc2Uuc2RwKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2hhdFNEUCBFeGNoYW5nZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgIGFsZXJ0KFwiQ2hhdFNEUCBFeGNoYW5nZSBlcnJvcjpcIiArIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHhQbGF5ZXIuY3JlYXRlT2ZmZXIoKS50aGVuKChvZmZlcjogYW55KSA9PiB7XG4gICAgICAgIElwYy5zZW5kKFwic3RyZWFtaW5nXCIsIFwic2VuZFNkcFwiLCB7XG4gICAgICAgICAgc2Vzc2lvbklkOiBzZXNzaW9uSWQsXG4gICAgICAgICAgc2RwOiBvZmZlci5zZHAsXG4gICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKHNkcFJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICB4UGxheWVyLnNldFJlbW90ZU9mZmVyKHNkcFJlc3VsdC5zZHApO1xuXG4gICAgICAgICAgICAvLyBHYXRoZXIgY2FuZGlkYXRlc1xuICAgICAgICAgICAgY29uc3QgaWNlQ2FuZGlkYXRlcyA9IHhQbGF5ZXIuZ2V0SWNlQ2FuZGlkYXRlcygpO1xuICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYW5kaWRhdGUgaW4gaWNlQ2FuZGlkYXRlcykge1xuICAgICAgICAgICAgICBjYW5kaWRhdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIGNhbmRpZGF0ZTogaWNlQ2FuZGlkYXRlc1tjYW5kaWRhdGVdLmNhbmRpZGF0ZSxcbiAgICAgICAgICAgICAgICBzZHBNTGluZUluZGV4OiBpY2VDYW5kaWRhdGVzW2NhbmRpZGF0ZV0uc2RwTUxpbmVJbmRleCxcbiAgICAgICAgICAgICAgICBzZHBNaWQ6IGljZUNhbmRpZGF0ZXNbY2FuZGlkYXRlXS5zZHBNaWQsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBJcGMuc2VuZChcInN0cmVhbWluZ1wiLCBcInNlbmRJY2VcIiwge1xuICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZCxcbiAgICAgICAgICAgICAgaWNlOiBjYW5kaWRhdGVzLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLnRoZW4oKGljZVJlc3VsdDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coaWNlUmVzdWx0KTtcbiAgICAgICAgICAgICAgICB4UGxheWVyLnNldEljZUNhbmRpZGF0ZXMoaWNlUmVzdWx0KTtcblxuICAgICAgICAgICAgICAgIC8vIEFsbCBkb25lLiBXYWl0aW5nIGZvciB0aGUgZXZlbnQgJ2Nvbm5lY3Rpb25zdGF0ZScgdG8gYmUgdHJpZ2dlcmVkXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIklDRSBFeGNoYW5nZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiSUNFIEV4Y2hhbmdlIGVycm9yOlwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IpKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNEUCBFeGNoYW5nZSBlcnJvcjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgYWxlcnQoXCJTRFAgRXhjaGFuZ2UgZXJyb3I6XCIgKyBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHhQbGF5ZXIuZ2V0RXZlbnRCdXMoKS5vbihcImNvbm5lY3Rpb25zdGF0ZVwiLCAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJjb25uZWN0aW9uc3RhdGUgY2hhbmdlZDpcIiwgZXZlbnQpO1xuXG4gICAgICAgIGlmIChldmVudC5zdGF0ZSA9PT0gXCJjb25uZWN0ZWRcIikge1xuICAgICAgICAgIC8vIFN0YXJ0IGtlZXBhbGl2ZSBsb29wXG4gICAgICAgICAga2VlcGFsaXZlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBJcGMuc2VuZChcInN0cmVhbWluZ1wiLCBcInNlbmRLZWVwYWxpdmVcIiwge1xuICAgICAgICAgICAgICBzZXNzaW9uSWQ6IHNlc3Npb25JZCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0U3RyZWFtIGtlZXBhbGl2ZTpcIiwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgICBcIkZhaWxlZCB0byBzZW5kIGtlZXBhbGl2ZS4gRXJyb3IgZGV0YWlsczpcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGVycm9yKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDMwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzZXNzaW9uSWQgPT09IFwiXCIpIHtcbiAgICAgIElwYy5zZW5kKFwic3RyZWFtaW5nXCIsIFwic3RhcnRTdHJlYW1cIiwge1xuICAgICAgICB0eXBlOiBzdHJlYW1UeXBlLFxuICAgICAgICB0YXJnZXQ6IHNlcnZlcklkLFxuICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHJlc3VsdDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coXCJTdGFydFN0cmVhbSBzZXNzaW9uOlwiLCByZXN1bHQpO1xuICAgICAgICAgIHNldFNlc3Npb25JZChyZXN1bHQpO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgYWxlcnQoXG4gICAgICAgICAgICBcIkZhaWxlZCB0byBzdGFydCBuZXcgc3RyZWFtLiBFcnJvciBkZXRhaWxzOlxcblwiICtcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZXJyb3IpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmVhbVN0YXRlSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIElwYy5zZW5kKFwic3RyZWFtaW5nXCIsIFwiZ2V0UGxheWVyU3RhdGVcIiwge1xuICAgICAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkLFxuICAgICAgICB9KVxuICAgICAgICAgIC50aGVuKChzZXNzaW9uOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGxheWVyIHN0YXRlOlwiLCBzZXNzaW9uKTtcblxuICAgICAgICAgICAgc3dpdGNoIChzZXNzaW9uLnBsYXllclN0YXRlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJwZW5kaW5nXCI6XG4gICAgICAgICAgICAgICAgLy8gV2FpdGluZyBmb3IgY29uc29sZSB0byBzdGFydFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJzdGFydGVkXCI6XG4gICAgICAgICAgICAgICAgLy8gQ29uc29sZSBpcyByZWFkeVxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoc3RyZWFtU3RhdGVJbnRlcnZhbCk7XG5cbiAgICAgICAgICAgICAgICAvLyBTdGFydCB4UGxheWVyIGludGVyZmFjZVxuICAgICAgICAgICAgICAgIHNldHhQbGF5ZXIoXG4gICAgICAgICAgICAgICAgICBuZXcgeFN0cmVhbWluZ1BsYXllcihcInZpZGVvSG9sZGVyXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgdWlfc3lzdGVtdWk6IFtdLFxuICAgICAgICAgICAgICAgICAgICB1aV90b3VjaGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBpbnB1dF9sZWdhY3lrZXlib2FyZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIFwiZmFpbGVkXCI6XG4gICAgICAgICAgICAgICAgLy8gRXJyb3JcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHN0cmVhbVN0YXRlSW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5lcnJvckRldGFpbHMuY29kZSA9PT0gXCJXTlNFcnJvclwiICYmXG4gICAgICAgICAgICAgICAgICBzZXNzaW9uLmVycm9yRGV0YWlscy5tZXNzYWdlLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICBcIldhaXRpbmdGb3JTZXJ2ZXJUb1JlZ2lzdGVyXCJcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIC8vIERldGVjdGVkIHRoZSBcIldhaXRpbmdGb3JTZXJ2ZXJUb1JlZ2lzdGVyXCIgZXJyb3IuIFRoaXMgbWVhbnMgdGhlIGNvbnNvbGUgaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgeGJveCBzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgICBhbGVydChcbiAgICAgICAgICAgICAgICAgICAgXCJVbmFibGUgdG8gc3RhcnQgc3RyZWFtIHNlc3Npb24gb24gY29uc29sZS4gVGhlIGNvbnNvbGUgaXMgbm90IGNvbm5lY3RlZCB0byB0aGUgWGJveCBzZXJ2ZXJzLiBUaGlzIG9jYXNpb25hbGx5IGhhcHBlbnMgdGhlbiB0aGVyZSBpcyBhbiB1cGRhdGUgb3Igd2hlbiB0aGUgdXNlciBpcyBub3Qgc2lnbmVkIGluIHRvIHRoZSBjb25zb2xlLiBQbGVhc2UgaGFyZCByZWJvb3QgeW91ciBjb25zb2xlIGFuZCB0cnkgYWdhaW4uXFxuXFxuXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiU3RyZWFtIGVycm9yIHJlc3VsdDogXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uc3RhdGUgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiXFxuRGV0YWlsczogW1wiICtcbiAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmVycm9yRGV0YWlscy5jb2RlICtcbiAgICAgICAgICAgICAgICAgICAgICBcIl0gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uZXJyb3JEZXRhaWxzLm1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGFsZXJ0KFxuICAgICAgICAgICAgICAgICAgICBcIlN0cmVhbSBlcnJvciByZXN1bHQ6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnN0YXRlICtcbiAgICAgICAgICAgICAgICAgICAgICBcIlxcbkRldGFpbHM6IFtcIiArXG4gICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5lcnJvckRldGFpbHMuY29kZSArXG4gICAgICAgICAgICAgICAgICAgICAgXCJdIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmVycm9yRGV0YWlscy5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZ1bGwgc3RyZWFtIGVycm9yOlwiLCBzZXNzaW9uLmVycm9yRGV0YWlscyk7XG4gICAgICAgICAgICAgICAgb25EaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgeFBsYXllci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgXCJxdWV1ZWRcIjpcbiAgICAgICAgICAgICAgICAvLyBXYWl0aW5nIGluIHF1ZXVlXG4gICAgICAgICAgICAgICAgLy8gQFRPRE86IFNob3cgcXVldWUgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBpZiAocXVldWVUaW1lID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICBzZXRRdWV1ZVRpbWUoXG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24ud2FpdGluZ1RpbWVzLmVzdGltYXRlZFRvdGFsV2FpdFRpbWVJblNlY29uZHNcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgXCJTZXR0aW5nIHF1ZXVlIHRvOlwiLFxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLndhaXRpbmdUaW1lcy5lc3RpbWF0ZWRUb3RhbFdhaXRUaW1lSW5TZWNvbmRzXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGFsZXJ0KFxuICAgICAgICAgICAgICBcIkZhaWxlZCB0byBnZXQgcGxheWVyIHN0YXRlLiBFcnJvciBkZXRhaWxzOlxcblwiICtcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeShlcnJvcilcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHhQbGF5ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB4UGxheWVyLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChrZWVwYWxpdmVJbnRlcnZhbCkge1xuICAgICAgICBjbGVhckludGVydmFsKGtlZXBhbGl2ZUludGVydmFsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0cmVhbVN0YXRlSW50ZXJ2YWwpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChzdHJlYW1TdGF0ZUludGVydmFsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICBmdW5jdGlvbiBvbkRpc2Nvbm5lY3QoKSB7XG4gICAgSXBjLnNlbmQoXCJzdHJlYW1pbmdcIiwgXCJzdG9wU3RyZWFtXCIsIHtcbiAgICAgIHNlc3Npb25JZDogc2Vzc2lvbklkLFxuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coXCJTdHJlYW0gc3RvcHBlZDpcIiwgcmVzdWx0KTtcbiAgICB9KTtcblxuICAgIGlmIChzdHJlYW1TdGF0ZUludGVydmFsKSB7XG4gICAgICBjbGVhckludGVydmFsKHN0cmVhbVN0YXRlSW50ZXJ2YWwpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxkaXYgaWQ9XCJ2aWRlb0hvbGRlclwiPjwvZGl2PlxuICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBTdHJlYW07XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJ1c2VSb3V0ZXIiLCJ4U3RyZWFtaW5nUGxheWVyIiwiSXBjIiwiU3RyZWFtIiwicm91dGVyIiwic3RyZWFtU3RhdGVJbnRlcnZhbCIsImtlZXBhbGl2ZUludGVydmFsIiwieFBsYXllciIsInNldHhQbGF5ZXIiLCJ1bmRlZmluZWQiLCJzZXNzaW9uSWQiLCJzZXRTZXNzaW9uSWQiLCJxdWV1ZVRpbWUiLCJzZXRRdWV1ZVRpbWUiLCJzdHJlYW1UeXBlIiwic2VydmVySWQiLCJxdWVyeSIsInNlcnZlcmlkIiwiY29uc29sZSIsImxvZyIsImJpbmQiLCJzZXRHYW1lcGFkS2VybmFsIiwic2V0U2RwSGFuZGxlciIsImNsaWVudCIsIm9mZmVyIiwic2VuZCIsInNkcCIsInRoZW4iLCJzZHBSZXNwb25zZSIsInNldFJlbW90ZU9mZmVyIiwiY2F0Y2giLCJlcnJvciIsImFsZXJ0IiwiSlNPTiIsInN0cmluZ2lmeSIsImNyZWF0ZU9mZmVyIiwic2RwUmVzdWx0IiwiaWNlQ2FuZGlkYXRlcyIsImdldEljZUNhbmRpZGF0ZXMiLCJjYW5kaWRhdGVzIiwiY2FuZGlkYXRlIiwicHVzaCIsInNkcE1MaW5lSW5kZXgiLCJzZHBNaWQiLCJpY2UiLCJpY2VSZXN1bHQiLCJzZXRJY2VDYW5kaWRhdGVzIiwiZ2V0RXZlbnRCdXMiLCJvbiIsImV2ZW50Iiwic3RhdGUiLCJzZXRJbnRlcnZhbCIsInJlc3VsdCIsInR5cGUiLCJ0YXJnZXQiLCJzZXNzaW9uIiwicGxheWVyU3RhdGUiLCJjbGVhckludGVydmFsIiwidWlfc3lzdGVtdWkiLCJ1aV90b3VjaGVuYWJsZWQiLCJpbnB1dF9sZWdhY3lrZXlib2FyZCIsImVycm9yRGV0YWlscyIsImNvZGUiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJvbkRpc2Nvbm5lY3QiLCJjbG9zZSIsIndhaXRpbmdUaW1lcyIsImVzdGltYXRlZFRvdGFsV2FpdFRpbWVJblNlY29uZHMiLCJkaXYiLCJpZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/stream/[serverid].tsx\n"));

/***/ }),

/***/ "../node_modules/next/router.js":
/*!**************************************!*\
  !*** ../node_modules/next/router.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("module.exports = __webpack_require__(/*! ./dist/client/router */ \"../node_modules/next/dist/client/router.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL25leHQvcm91dGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLDhHQUFnRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL25leHQvcm91dGVyLmpzP2IyN2IiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvY2xpZW50L3JvdXRlcicpXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/next/router.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Base.js":
/*!**************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass BaseChannel {\n    constructor(channelName, client) {\n        this._events = {\n            'state': [],\n        };\n        this._channelName = channelName;\n        this._client = client;\n        this._state = 'new';\n    }\n    // Events\n    onOpen(event) {\n        console.log('xStreamingPlayer Channels/Base.ts - [' + this._channelName + '] onOpen:', event);\n        this.setState('connected');\n    }\n    // onMessage(event) {\n    //     console.log('xSDK channel/base.js - ['+this._channelName+'] onMessage:', event)\n    // }\n    onClosing(event) {\n        console.log('xStreamingPlayer Channel/Base.ts - [' + this._channelName + '] onClosing:', event);\n        this.setState('closing');\n    }\n    onClose(event) {\n        console.log('xStreamingPlayer Channel/Base.ts - [' + this._channelName + '] onClose:', event);\n        this.setState('closed');\n    }\n    destroy() {\n        // Called when we want to destroy the channel.\n    }\n    setState(state) {\n        this._state = state;\n        this.emitEvent('state', {\n            state: this._state,\n        });\n    }\n    // Channel functions\n    send(data) {\n        const channel = this.getClient().getChannel(this._channelName);\n        // Encode to ArrayBuffer if not ArrayBuffer\n        if (channel.readyState === 'open') {\n            if (this._channelName !== 'input' && this._channelName !== 'chat') {\n                console.log('xStreamingPlayer Channel/Base.ts - [' + this._channelName + '] Sending message:', data);\n            }\n            if (typeof data === 'string') {\n                data = (new TextEncoder).encode(data);\n            }\n            channel.send(data);\n        }\n        else {\n            console.warn('xStreamingPlayer Channel/Base.ts - [' + this._channelName + '] Channel is closed. Failed to send packet:', data);\n        }\n    }\n    // Base functions\n    getClient() {\n        return this._client;\n    }\n    addEventListener(name, callback) {\n        this._events[name].push(callback);\n    }\n    emitEvent(name, event) {\n        for (const callback in this._events[name]) {\n            this._events[name][callback](event);\n        }\n    }\n}\nexports[\"default\"] = BaseChannel;\n//# sourceMappingURL=Base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ2hhbm5lbC9CYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi9ub2RlX21vZHVsZXMveHN0cmVhbWluZy1wbGF5ZXIvZGlzdC9DaGFubmVsL0Jhc2UuanM/OGE1NiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEJhc2VDaGFubmVsIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFubmVsTmFtZSwgY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHtcbiAgICAgICAgICAgICdzdGF0ZSc6IFtdLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jaGFubmVsTmFtZSA9IGNoYW5uZWxOYW1lO1xuICAgICAgICB0aGlzLl9jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ25ldyc7XG4gICAgfVxuICAgIC8vIEV2ZW50c1xuICAgIG9uT3BlbihldmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVscy9CYXNlLnRzIC0gWycgKyB0aGlzLl9jaGFubmVsTmFtZSArICddIG9uT3BlbjonLCBldmVudCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoJ2Nvbm5lY3RlZCcpO1xuICAgIH1cbiAgICAvLyBvbk1lc3NhZ2UoZXZlbnQpIHtcbiAgICAvLyAgICAgY29uc29sZS5sb2coJ3hTREsgY2hhbm5lbC9iYXNlLmpzIC0gWycrdGhpcy5fY2hhbm5lbE5hbWUrJ10gb25NZXNzYWdlOicsIGV2ZW50KVxuICAgIC8vIH1cbiAgICBvbkNsb3NpbmcoZXZlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9CYXNlLnRzIC0gWycgKyB0aGlzLl9jaGFubmVsTmFtZSArICddIG9uQ2xvc2luZzonLCBldmVudCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoJ2Nsb3NpbmcnKTtcbiAgICB9XG4gICAgb25DbG9zZShldmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL0Jhc2UudHMgLSBbJyArIHRoaXMuX2NoYW5uZWxOYW1lICsgJ10gb25DbG9zZTonLCBldmVudCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoJ2Nsb3NlZCcpO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICAvLyBDYWxsZWQgd2hlbiB3ZSB3YW50IHRvIGRlc3Ryb3kgdGhlIGNoYW5uZWwuXG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMuZW1pdEV2ZW50KCdzdGF0ZScsIHtcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLl9zdGF0ZSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENoYW5uZWwgZnVuY3Rpb25zXG4gICAgc2VuZChkYXRhKSB7XG4gICAgICAgIGNvbnN0IGNoYW5uZWwgPSB0aGlzLmdldENsaWVudCgpLmdldENoYW5uZWwodGhpcy5fY2hhbm5lbE5hbWUpO1xuICAgICAgICAvLyBFbmNvZGUgdG8gQXJyYXlCdWZmZXIgaWYgbm90IEFycmF5QnVmZmVyXG4gICAgICAgIGlmIChjaGFubmVsLnJlYWR5U3RhdGUgPT09ICdvcGVuJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NoYW5uZWxOYW1lICE9PSAnaW5wdXQnICYmIHRoaXMuX2NoYW5uZWxOYW1lICE9PSAnY2hhdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL0Jhc2UudHMgLSBbJyArIHRoaXMuX2NoYW5uZWxOYW1lICsgJ10gU2VuZGluZyBtZXNzYWdlOicsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGRhdGEgPSAobmV3IFRleHRFbmNvZGVyKS5lbmNvZGUoZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFubmVsLnNlbmQoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9CYXNlLnRzIC0gWycgKyB0aGlzLl9jaGFubmVsTmFtZSArICddIENoYW5uZWwgaXMgY2xvc2VkLiBGYWlsZWQgdG8gc2VuZCBwYWNrZXQ6JywgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQmFzZSBmdW5jdGlvbnNcbiAgICBnZXRDbGllbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnQ7XG4gICAgfVxuICAgIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZXZlbnRzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgICBlbWl0RXZlbnQobmFtZSwgZXZlbnQpIHtcbiAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBpbiB0aGlzLl9ldmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1tuYW1lXVtjYWxsYmFja10oZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZUNoYW5uZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1CYXNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Base.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Chat.js":
/*!**************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Chat.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Base_1 = __importDefault(__webpack_require__(/*! ./Base */ \"../node_modules/xstreaming-player/dist/Channel/Base.js\"));\nclass ChatChannel extends Base_1.default {\n    constructor() {\n        super(...arguments);\n        this.isCapturing = false;\n        this.isPaused = true;\n    }\n    onOpen(event) {\n        super.onOpen(event);\n        // console.log('xStreamingPlayer Channel/Control.ts - ['+this._channelName+'] onOpen:', event)\n    }\n    start() {\n        // Do nothing\n    }\n    onMessage(event) {\n        console.log('xStreamingPlayer Channel/Chat.ts - [' + this._channelName + '] onMessage:', event);\n        const jsonMessage = JSON.parse(event.data);\n        console.log('xStreamingPlayer Channel/Chat.ts - Received json:', jsonMessage);\n    }\n    onClose(event) {\n        super.onClose(event);\n        // console.log('xStreamingPlayer Channel/Control.ts - ['+this._channelName+'] onClose:', event)\n    }\n    startMic() {\n        console.log('xStreamingPlayer Channel/Chat.ts - Enabling Microphone');\n        if (this.isCapturing === false) {\n            console.log('Start chat...');\n            navigator.mediaDevices.getUserMedia({\n                audio: {\n                    channelCount: 1,\n                    sampleRate: 24e3,\n                },\n            }).then((stream) => {\n                this.isCapturing = true;\n                const audioTracks = stream.getAudioTracks();\n                if (audioTracks.length > 0) {\n                    console.log(`Using Audio device: ${audioTracks[0].label}`);\n                }\n                else {\n                    console.log('No Audio device:', audioTracks);\n                }\n                stream.getTracks().forEach(track => {\n                    var _a;\n                    (_a = this._client._webrtcClient) === null || _a === void 0 ? void 0 : _a.addTrack(track, stream);\n                });\n                this._client.sdpNegotiationChat();\n            }).catch(e => {\n                alert(`getUserMedia() error: ${e.name}`);\n                this.isCapturing = false;\n            });\n        }\n        this.isPaused = false;\n    }\n    stopMic() {\n        var _a, _b, _c;\n        console.log('xStreamingPlayer Channel/Chat.ts - Disabling Microphone');\n        const senders = (_a = this._client._webrtcClient) === null || _a === void 0 ? void 0 : _a.getSenders();\n        for (const sender in senders) {\n            if (senders[sender].track !== null) {\n                if (((_b = senders[sender].track) === null || _b === void 0 ? void 0 : _b.kind) === 'audio') {\n                    (_c = this._client._webrtcClient) === null || _c === void 0 ? void 0 : _c.removeTrack(senders[sender]);\n                }\n            }\n        }\n        this.isCapturing = false;\n        this.isPaused = true;\n    }\n}\nexports[\"default\"] = ChatChannel;\n//# sourceMappingURL=Chat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ2hhbm5lbC9DaGF0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLG1CQUFPLENBQUMsc0VBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx1REFBdUQscUJBQXFCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsYUFBYTtBQUNiLCtDQUErQyxPQUFPO0FBQ3REO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy94c3RyZWFtaW5nLXBsYXllci9kaXN0L0NoYW5uZWwvQ2hhdC5qcz82MGFjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VcIikpO1xuY2xhc3MgQ2hhdENoYW5uZWwgZXh0ZW5kcyBCYXNlXzEuZGVmYXVsdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgfVxuICAgIG9uT3BlbihldmVudCkge1xuICAgICAgICBzdXBlci5vbk9wZW4oZXZlbnQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL0NvbnRyb2wudHMgLSBbJyt0aGlzLl9jaGFubmVsTmFtZSsnXSBvbk9wZW46JywgZXZlbnQpXG4gICAgfVxuICAgIHN0YXJ0KCkge1xuICAgICAgICAvLyBEbyBub3RoaW5nXG4gICAgfVxuICAgIG9uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL0NoYXQudHMgLSBbJyArIHRoaXMuX2NoYW5uZWxOYW1lICsgJ10gb25NZXNzYWdlOicsIGV2ZW50KTtcbiAgICAgICAgY29uc3QganNvbk1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL0NoYXQudHMgLSBSZWNlaXZlZCBqc29uOicsIGpzb25NZXNzYWdlKTtcbiAgICB9XG4gICAgb25DbG9zZShldmVudCkge1xuICAgICAgICBzdXBlci5vbkNsb3NlKGV2ZW50KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9Db250cm9sLnRzIC0gWycrdGhpcy5fY2hhbm5lbE5hbWUrJ10gb25DbG9zZTonLCBldmVudClcbiAgICB9XG4gICAgc3RhcnRNaWMoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd4U3RyZWFtaW5nUGxheWVyIENoYW5uZWwvQ2hhdC50cyAtIEVuYWJsaW5nIE1pY3JvcGhvbmUnKTtcbiAgICAgICAgaWYgKHRoaXMuaXNDYXB0dXJpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU3RhcnQgY2hhdC4uLicpO1xuICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoe1xuICAgICAgICAgICAgICAgIGF1ZGlvOiB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5uZWxDb3VudDogMSxcbiAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogMjRlMyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkudGhlbigoc3RyZWFtKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0NhcHR1cmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9UcmFja3MgPSBzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKTtcbiAgICAgICAgICAgICAgICBpZiAoYXVkaW9UcmFja3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNpbmcgQXVkaW8gZGV2aWNlOiAke2F1ZGlvVHJhY2tzWzBdLmxhYmVsfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ05vIEF1ZGlvIGRldmljZTonLCBhdWRpb1RyYWNrcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKHRyYWNrID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLl9jbGllbnQuX3dlYnJ0Y0NsaWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmFkZFRyYWNrKHRyYWNrLCBzdHJlYW0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NsaWVudC5zZHBOZWdvdGlhdGlvbkNoYXQoKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGBnZXRVc2VyTWVkaWEoKSBlcnJvcjogJHtlLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0NhcHR1cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBzdG9wTWljKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9DaGF0LnRzIC0gRGlzYWJsaW5nIE1pY3JvcGhvbmUnKTtcbiAgICAgICAgY29uc3Qgc2VuZGVycyA9IChfYSA9IHRoaXMuX2NsaWVudC5fd2VicnRjQ2xpZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ2V0U2VuZGVycygpO1xuICAgICAgICBmb3IgKGNvbnN0IHNlbmRlciBpbiBzZW5kZXJzKSB7XG4gICAgICAgICAgICBpZiAoc2VuZGVyc1tzZW5kZXJdLnRyYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCgoX2IgPSBzZW5kZXJzW3NlbmRlcl0udHJhY2spID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5raW5kKSA9PT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgICAgICAgICAoX2MgPSB0aGlzLl9jbGllbnQuX3dlYnJ0Y0NsaWVudCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnJlbW92ZVRyYWNrKHNlbmRlcnNbc2VuZGVyXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNDYXB0dXJpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQ2hhdENoYW5uZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1DaGF0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Chat.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Control.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Control.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Base_1 = __importDefault(__webpack_require__(/*! ./Base */ \"../node_modules/xstreaming-player/dist/Channel/Base.js\"));\nclass ControlChannel extends Base_1.default {\n    onOpen(event) {\n        super.onOpen(event);\n        // console.log('xStreamingPlayer Channel/Control.ts - ['+this._channelName+'] onOpen:', event)\n    }\n    start() {\n        const authRequest = JSON.stringify({\n            'message': 'authorizationRequest',\n            'accessKey': '4BDB3609-C1F1-4195-9B37-FEFF45DA8B8E',\n        });\n        this.send(authRequest);\n        this._client._inputDriver.start();\n        this._client._keyboardDriver.start();\n        this.sendGamepadRemoved(0);\n        setTimeout(() => {\n            this.sendGamepadAdded(0);\n        }, 500);\n    }\n    sendGamepadAdded(gamepadIndex) {\n        const gamepadRequest = JSON.stringify({\n            'message': 'gamepadChanged',\n            'gamepadIndex': gamepadIndex,\n            'wasAdded': true,\n        });\n        this.send(gamepadRequest);\n    }\n    sendGamepadRemoved(gamepadIndex) {\n        const gamepadRequest = JSON.stringify({\n            'message': 'gamepadChanged',\n            'gamepadIndex': gamepadIndex,\n            'wasAdded': false,\n        });\n        this.send(gamepadRequest);\n    }\n    onMessage(event) {\n        console.log('xStreamingPlayer Channel/Control.ts - [' + this._channelName + '] onMessage:', event);\n        const jsonMessage = JSON.parse(event.data);\n        console.log('xStreamingPlayer Channel/Control.ts - Received json:', jsonMessage);\n    }\n    onClose(event) {\n        super.onClose(event);\n        // console.log('xStreamingPlayer Channel/Control.ts - ['+this._channelName+'] onClose:', event)\n        this._client._inputDriver.stop();\n        this._client._keyboardDriver.stop();\n    }\n    requestKeyframeRequest() {\n        console.log('xStreamingPlayer Channel/Control.ts - [' + this._channelName + '] User requested Video KeyFrame');\n        const keyframeRequest = JSON.stringify({\n            message: 'videoKeyframeRequested',\n            ifrRequested: true,\n        });\n        this.send(keyframeRequest);\n    }\n}\nexports[\"default\"] = ControlChannel;\n//# sourceMappingURL=Control.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ2hhbm5lbC9Db250cm9sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLG1CQUFPLENBQUMsc0VBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy94c3RyZWFtaW5nLXBsYXllci9kaXN0L0NoYW5uZWwvQ29udHJvbC5qcz85MTc2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VcIikpO1xuY2xhc3MgQ29udHJvbENoYW5uZWwgZXh0ZW5kcyBCYXNlXzEuZGVmYXVsdCB7XG4gICAgb25PcGVuKGV2ZW50KSB7XG4gICAgICAgIHN1cGVyLm9uT3BlbihldmVudCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd4U3RyZWFtaW5nUGxheWVyIENoYW5uZWwvQ29udHJvbC50cyAtIFsnK3RoaXMuX2NoYW5uZWxOYW1lKyddIG9uT3BlbjonLCBldmVudClcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IGF1dGhSZXF1ZXN0ID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgJ21lc3NhZ2UnOiAnYXV0aG9yaXphdGlvblJlcXVlc3QnLFxuICAgICAgICAgICAgJ2FjY2Vzc0tleSc6ICc0QkRCMzYwOS1DMUYxLTQxOTUtOUIzNy1GRUZGNDVEQThCOEUnLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kKGF1dGhSZXF1ZXN0KTtcbiAgICAgICAgdGhpcy5fY2xpZW50Ll9pbnB1dERyaXZlci5zdGFydCgpO1xuICAgICAgICB0aGlzLl9jbGllbnQuX2tleWJvYXJkRHJpdmVyLnN0YXJ0KCk7XG4gICAgICAgIHRoaXMuc2VuZEdhbWVwYWRSZW1vdmVkKDApO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2VuZEdhbWVwYWRBZGRlZCgwKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9XG4gICAgc2VuZEdhbWVwYWRBZGRlZChnYW1lcGFkSW5kZXgpIHtcbiAgICAgICAgY29uc3QgZ2FtZXBhZFJlcXVlc3QgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAnbWVzc2FnZSc6ICdnYW1lcGFkQ2hhbmdlZCcsXG4gICAgICAgICAgICAnZ2FtZXBhZEluZGV4JzogZ2FtZXBhZEluZGV4LFxuICAgICAgICAgICAgJ3dhc0FkZGVkJzogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZChnYW1lcGFkUmVxdWVzdCk7XG4gICAgfVxuICAgIHNlbmRHYW1lcGFkUmVtb3ZlZChnYW1lcGFkSW5kZXgpIHtcbiAgICAgICAgY29uc3QgZ2FtZXBhZFJlcXVlc3QgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAnbWVzc2FnZSc6ICdnYW1lcGFkQ2hhbmdlZCcsXG4gICAgICAgICAgICAnZ2FtZXBhZEluZGV4JzogZ2FtZXBhZEluZGV4LFxuICAgICAgICAgICAgJ3dhc0FkZGVkJzogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNlbmQoZ2FtZXBhZFJlcXVlc3QpO1xuICAgIH1cbiAgICBvbk1lc3NhZ2UoZXZlbnQpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9Db250cm9sLnRzIC0gWycgKyB0aGlzLl9jaGFubmVsTmFtZSArICddIG9uTWVzc2FnZTonLCBldmVudCk7XG4gICAgICAgIGNvbnN0IGpzb25NZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9Db250cm9sLnRzIC0gUmVjZWl2ZWQganNvbjonLCBqc29uTWVzc2FnZSk7XG4gICAgfVxuICAgIG9uQ2xvc2UoZXZlbnQpIHtcbiAgICAgICAgc3VwZXIub25DbG9zZShldmVudCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd4U3RyZWFtaW5nUGxheWVyIENoYW5uZWwvQ29udHJvbC50cyAtIFsnK3RoaXMuX2NoYW5uZWxOYW1lKyddIG9uQ2xvc2U6JywgZXZlbnQpXG4gICAgICAgIHRoaXMuX2NsaWVudC5faW5wdXREcml2ZXIuc3RvcCgpO1xuICAgICAgICB0aGlzLl9jbGllbnQuX2tleWJvYXJkRHJpdmVyLnN0b3AoKTtcbiAgICB9XG4gICAgcmVxdWVzdEtleWZyYW1lUmVxdWVzdCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ2hhbm5lbC9Db250cm9sLnRzIC0gWycgKyB0aGlzLl9jaGFubmVsTmFtZSArICddIFVzZXIgcmVxdWVzdGVkIFZpZGVvIEtleUZyYW1lJyk7XG4gICAgICAgIGNvbnN0IGtleWZyYW1lUmVxdWVzdCA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICd2aWRlb0tleWZyYW1lUmVxdWVzdGVkJyxcbiAgICAgICAgICAgIGlmclJlcXVlc3RlZDogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZChrZXlmcmFtZVJlcXVlc3QpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbnRyb2xDaGFubmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udHJvbC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Control.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Input.js":
/*!***************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Input.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst FpsCounter_1 = __importDefault(__webpack_require__(/*! ../Helper/FpsCounter */ \"../node_modules/xstreaming-player/dist/Helper/FpsCounter.js\"));\n//import LatencyCounter from '../Helper/LatencyCounter'\nconst Base_1 = __importDefault(__webpack_require__(/*! ./Base */ \"../node_modules/xstreaming-player/dist/Channel/Base.js\"));\nconst Packet_1 = __importDefault(__webpack_require__(/*! ./Input/Packet */ \"../node_modules/xstreaming-player/dist/Channel/Input/Packet.js\"));\nclass InputChannel extends Base_1.default {\n    constructor(channelName, client) {\n        super(channelName, client);\n        this._inputSequenceNum = 0;\n        this._reportTypes = {\n            None: 0,\n            Metadata: 1,\n            Gamepad: 2,\n            Pointer: 4,\n            ClientMetadata: 8,\n            ServerMetadata: 16,\n            Mouse: 32,\n            Keyboard: 64,\n            Vibration: 128,\n            Sendor: 256,\n        };\n        this._frameMetadataQueue = [];\n        this._gamepadFrames = [];\n        this._pointerFrames = [];\n        this._pointerCounter = 1;\n        this._mouseFrames = [];\n        this._keyboardFrames = [];\n        this._keyboardEvents = [];\n        // _inputLatency:LatencyCounter\n        this._rumbleInterval = { 0: undefined, 1: undefined, 2: undefined, 3: undefined };\n        this._rumbleEnabled = true;\n        this._touchEvents = {};\n        this._touchLastPointerId = 0;\n        this._mouseActive = false;\n        this._mouseLocked = false;\n        this._touchActive = false;\n        this._mouseStateButtons = 0;\n        this._mouseStateX = 0;\n        this._mouseStateY = 0;\n        this._keyboardButtonsState = {};\n        this._metadataFps = new FpsCounter_1.default(this.getClient(), 'metadata');\n        // this._metadataLatency = new LatencyCounter(this.getClient(), 'metadata')\n        this._inputFps = new FpsCounter_1.default(this.getClient(), 'input');\n        // this._inputLatency = new LatencyCounter(this.getClient(), 'input')\n    }\n    onOpen(event) {\n        super.onOpen(event);\n        this._metadataFps.start();\n        this._inputFps.start();\n        // console.log('xStreamingPlayer Channel/Input.ts - ['+this._channelName+'] onOpen:', event)\n    }\n    start() {\n        const Packet = new Packet_1.default(this._inputSequenceNum);\n        Packet.setMetadata(2);\n        this.send(Packet.toBuffer());\n        this.getClient()._inputDriver.run();\n        this._inputInterval = setInterval(() => {\n            // Keyboard mask for legacy input\n            if (this._client._config.input_legacykeyboard === true && this.getGamepadQueueLength() === 0) {\n                const gpState = this.getClient()._inputDriver.requestStates();\n                const kbState = this.getClient()._keyboardDriver.requestState();\n                const mergedState = this.mergeState(gpState[0], kbState, this._adhocState);\n                this._adhocState = null;\n                this.queueGamepadState(mergedState);\n                this._inputFps.count();\n            }\n            if (this._client._config.input_touch === true && Object.keys(this._touchEvents).length > 0) {\n                for (const pointerEvent in this._touchEvents) {\n                    this._pointerFrames.push({\n                        events: this._touchEvents[pointerEvent].events,\n                    });\n                }\n                this._touchEvents = {};\n            }\n            const metadataQueue = this.getMetadataQueue();\n            const gamepadQueue = this.getGamepadQueue();\n            const pointerQueue = this.getPointerQueue();\n            const mouseQueue = this.getMouseQueue();\n            const keyboardQueue = this.getKeyboardQueue();\n            if (metadataQueue.length !== 0 || gamepadQueue.length !== 0 || pointerQueue.length !== 0) {\n                this._inputSequenceNum++;\n                const packet = new Packet_1.default(this._inputSequenceNum);\n                packet.setData(metadataQueue, gamepadQueue, pointerQueue, mouseQueue, keyboardQueue);\n                // console.log('Sending new format:', packet)\n                this._metadataFps.count();\n                // if (gamepadQueue.length > 0) {\n                //     console.log('Input.ts gamepadQueue:', gamepadQueue)\n                // }\n                this.send(packet.toBuffer());\n            }\n        }, 4); // 16 ms = 1 frame (1000/60)\n    }\n    mergeState(gpState, kbState, adHoc) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;\n        return {\n            GamepadIndex: (_a = gpState === null || gpState === void 0 ? void 0 : gpState.GamepadIndex) !== null && _a !== void 0 ? _a : kbState.GamepadIndex,\n            A: Math.max((_b = gpState === null || gpState === void 0 ? void 0 : gpState.A) !== null && _b !== void 0 ? _b : 0, kbState.A, (_c = adHoc === null || adHoc === void 0 ? void 0 : adHoc.A) !== null && _c !== void 0 ? _c : 0),\n            B: Math.max((_d = gpState === null || gpState === void 0 ? void 0 : gpState.B) !== null && _d !== void 0 ? _d : 0, kbState.B, (_e = adHoc === null || adHoc === void 0 ? void 0 : adHoc.B) !== null && _e !== void 0 ? _e : 0),\n            X: Math.max((_f = gpState === null || gpState === void 0 ? void 0 : gpState.X) !== null && _f !== void 0 ? _f : 0, kbState.X, (_g = adHoc === null || adHoc === void 0 ? void 0 : adHoc.X) !== null && _g !== void 0 ? _g : 0),\n            Y: Math.max((_h = gpState === null || gpState === void 0 ? void 0 : gpState.Y) !== null && _h !== void 0 ? _h : 0, kbState.Y, (_j = adHoc === null || adHoc === void 0 ? void 0 : adHoc.Y) !== null && _j !== void 0 ? _j : 0),\n            LeftShoulder: Math.max((_k = gpState === null || gpState === void 0 ? void 0 : gpState.LeftShoulder) !== null && _k !== void 0 ? _k : 0, kbState.LeftShoulder, (_l = adHoc === null || adHoc === void 0 ? void 0 : adHoc.LeftShoulder) !== null && _l !== void 0 ? _l : 0),\n            RightShoulder: Math.max((_m = gpState === null || gpState === void 0 ? void 0 : gpState.RightShoulder) !== null && _m !== void 0 ? _m : 0, kbState.RightShoulder, (_o = adHoc === null || adHoc === void 0 ? void 0 : adHoc.RightShoulder) !== null && _o !== void 0 ? _o : 0),\n            LeftTrigger: Math.max((_p = gpState === null || gpState === void 0 ? void 0 : gpState.LeftTrigger) !== null && _p !== void 0 ? _p : 0, kbState.LeftTrigger, (_q = adHoc === null || adHoc === void 0 ? void 0 : adHoc.LeftTrigger) !== null && _q !== void 0 ? _q : 0),\n            RightTrigger: Math.max((_r = gpState === null || gpState === void 0 ? void 0 : gpState.RightTrigger) !== null && _r !== void 0 ? _r : 0, kbState.RightTrigger, (_s = adHoc === null || adHoc === void 0 ? void 0 : adHoc.RightTrigger) !== null && _s !== void 0 ? _s : 0),\n            View: Math.max((_t = gpState === null || gpState === void 0 ? void 0 : gpState.View) !== null && _t !== void 0 ? _t : 0, kbState.View, (_u = adHoc === null || adHoc === void 0 ? void 0 : adHoc.View) !== null && _u !== void 0 ? _u : 0),\n            Menu: Math.max((_v = gpState === null || gpState === void 0 ? void 0 : gpState.Menu) !== null && _v !== void 0 ? _v : 0, kbState.Menu, (_w = adHoc === null || adHoc === void 0 ? void 0 : adHoc.Menu) !== null && _w !== void 0 ? _w : 0),\n            LeftThumb: Math.max((_x = gpState === null || gpState === void 0 ? void 0 : gpState.LeftThumb) !== null && _x !== void 0 ? _x : 0, kbState.LeftThumb, (_y = adHoc === null || adHoc === void 0 ? void 0 : adHoc.LeftThumb) !== null && _y !== void 0 ? _y : 0),\n            RightThumb: Math.max((_z = gpState === null || gpState === void 0 ? void 0 : gpState.RightThumb) !== null && _z !== void 0 ? _z : 0, kbState.RightThumb, (_0 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.RightThumb) !== null && _0 !== void 0 ? _0 : 0),\n            DPadUp: Math.max((_1 = gpState === null || gpState === void 0 ? void 0 : gpState.DPadUp) !== null && _1 !== void 0 ? _1 : 0, kbState.DPadUp, (_2 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.DPadUp) !== null && _2 !== void 0 ? _2 : 0),\n            DPadDown: Math.max((_3 = gpState === null || gpState === void 0 ? void 0 : gpState.DPadDown) !== null && _3 !== void 0 ? _3 : 0, kbState.DPadDown, (_4 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.DPadDown) !== null && _4 !== void 0 ? _4 : 0),\n            DPadLeft: Math.max((_5 = gpState === null || gpState === void 0 ? void 0 : gpState.DPadLeft) !== null && _5 !== void 0 ? _5 : 0, kbState.DPadLeft, (_6 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.DPadLeft) !== null && _6 !== void 0 ? _6 : 0),\n            DPadRight: Math.max((_7 = gpState === null || gpState === void 0 ? void 0 : gpState.DPadRight) !== null && _7 !== void 0 ? _7 : 0, kbState.DPadRight, (_8 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.DPadRight) !== null && _8 !== void 0 ? _8 : 0),\n            Nexus: Math.max((_9 = gpState === null || gpState === void 0 ? void 0 : gpState.Nexus) !== null && _9 !== void 0 ? _9 : 0, kbState.Nexus, (_10 = adHoc === null || adHoc === void 0 ? void 0 : adHoc.Nexus) !== null && _10 !== void 0 ? _10 : 0),\n            LeftThumbXAxis: this.mergeAxix((_11 = gpState === null || gpState === void 0 ? void 0 : gpState.LeftThumbXAxis) !== null && _11 !== void 0 ? _11 : 0, kbState.LeftThumbXAxis),\n            LeftThumbYAxis: this.mergeAxix((_12 = gpState === null || gpState === void 0 ? void 0 : gpState.LeftThumbYAxis) !== null && _12 !== void 0 ? _12 : 0, kbState.LeftThumbYAxis),\n            RightThumbXAxis: this.mergeAxix((_13 = gpState === null || gpState === void 0 ? void 0 : gpState.RightThumbXAxis) !== null && _13 !== void 0 ? _13 : 0, kbState.RightThumbXAxis),\n            RightThumbYAxis: this.mergeAxix((_14 = gpState === null || gpState === void 0 ? void 0 : gpState.RightThumbYAxis) !== null && _14 !== void 0 ? _14 : 0, kbState.RightThumbYAxis),\n        };\n    }\n    mergeAxix(axis1, axis2) {\n        if (Math.abs(axis1) > Math.abs(axis2)) {\n            return axis1;\n        }\n        else {\n            return axis2;\n        }\n    }\n    onMessage(event) {\n        // console.log('xStreamingPlayer Channel/Input.ts - ['+this._channelName+'] onMessage:', event)\n        var _a;\n        const dataView = new DataView(event.data);\n        let i = 0;\n        const reportType = dataView.getUint8(i);\n        // const unk1 = dataView.getUint8(i+1)\n        i += 2;\n        if (reportType === this._reportTypes.Vibration) {\n            console.log('xStreamingPlayer Input.ts channel input Vibration:', this._client._vibration);\n            if (!this._client._vibration) {\n                return;\n            }\n            dataView.getUint8(i); // rumbleType: 0 = FourMotorRumble\n            const gamepadIndex = dataView.getUint8(i + 1); // Gamepadindex?\n            // console.log('gamepad: ', gamepadIndex, unk1)\n            i += 2; // Read one unknown byte extra\n            const leftMotorPercent = dataView.getUint8(i) / 100;\n            const rightMotorPercent = dataView.getUint8(i + 1) / 100;\n            const leftTriggerMotorPercent = dataView.getUint8(i + 2) / 100;\n            const rightTriggerMotorPercent = dataView.getUint8(i + 3) / 100;\n            const durationMs = dataView.getUint16(i + 4, true);\n            const delayMs = dataView.getUint16(i + 6, true);\n            const repeat = dataView.getUint8(i + 8);\n            i += 9;\n            const rumbleData = {\n                startDelay: 0, // 振动效果开始之前延迟的时间，单位为毫秒。设置为0表示立即开始振动效果\n                duration: durationMs, // 振动效果持续的时间，单位为毫秒\n                weakMagnitude: rightMotorPercent, //  弱振动的强度，范围通常在0到1之间。对应游戏手柄的右侧振动电机\n                strongMagnitude: leftMotorPercent, // 强振动的强度，范围通常在0到1之间。对应游戏手柄的左侧振动电机\n                leftTrigger: leftTriggerMotorPercent, // 左扳机振动的强度，范围通常在0到1之间\n                rightTrigger: rightTriggerMotorPercent, // 右扳机振动的强度，范围通常在0到1之间\n            };\n            console.log('rumbleData:', rumbleData);\n            if (this._client._vibration_mode === 'Device') {\n                console.log('use device vibration:', window.ReactNativeWebView);\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(JSON.stringify({\n                        type: 'deviceVibration',\n                        message: {\n                            rumbleData,\n                            repeat,\n                        },\n                    }));\n                }\n            }\n            else if (this._client._vibration_mode === 'Native') {\n                console.log('Use native gamepad vibration');\n                if (window.ReactNativeWebView) {\n                    window.ReactNativeWebView.postMessage(JSON.stringify({\n                        type: 'nativeVibration',\n                        message: {\n                            rumbleData,\n                            repeat,\n                        },\n                    }));\n                }\n            }\n            else if (this._client._vibration_mode === 'Webview') {\n                // Check if we have an active gamepad and rumble enabled\n                // FIXME: Android 11 not working\n                try {\n                    const gamepad = navigator.getGamepads()[gamepadIndex];\n                    if (gamepad !== null && this._rumbleEnabled === true) {\n                        if (this._rumbleInterval[gamepadIndex] !== undefined) {\n                            clearInterval(this._rumbleInterval[gamepadIndex]);\n                        }\n                        if (gamepad.vibrationActuator !== undefined) {\n                            if (gamepad.vibrationActuator.type === 'dual-rumble') {\n                                const intensityRumble = rightMotorPercent < .6 ? (.6 - rightMotorPercent) / 2 : 0;\n                                const intensityRumbleTriggers = (leftTriggerMotorPercent + rightTriggerMotorPercent) / 4;\n                                const endIntensity = Math.min(intensityRumble, intensityRumbleTriggers);\n                                rumbleData.weakMagnitude = Math.min(1, rightMotorPercent + endIntensity);\n                                // Set triggers as we have changed the motor rumble already\n                                rumbleData.leftTrigger = 0;\n                                rumbleData.rightTrigger = 0;\n                            }\n                            console.log('gamepad.vibrationActuator?.playEffect');\n                            (_a = gamepad.vibrationActuator) === null || _a === void 0 ? void 0 : _a.playEffect(gamepad.vibrationActuator.type, rumbleData);\n                            if (repeat > 0) {\n                                let repeatCount = repeat;\n                                this._rumbleInterval[gamepadIndex] = setInterval(() => {\n                                    var _a;\n                                    if (repeatCount <= 0) {\n                                        clearInterval(this._rumbleInterval[gamepadIndex]);\n                                    }\n                                    if (gamepad.vibrationActuator !== undefined) {\n                                        (_a = gamepad.vibrationActuator) === null || _a === void 0 ? void 0 : _a.playEffect(gamepad.vibrationActuator.type, rumbleData);\n                                    }\n                                    repeatCount--;\n                                }, delayMs + durationMs);\n                            }\n                        }\n                    }\n                }\n                catch (e) {\n                    console.log('xStreamingPlayer Input.ts error:', e);\n                }\n            }\n        }\n    }\n    onClose(event) {\n        clearInterval(this._inputInterval);\n        super.onClose(event);\n        // console.log('xStreamingPlayer Channel/Input.ts - ['+this._channelName+'] onClose:', event)\n    }\n    _createInputPacket(reportType, metadataQueue, gamepadQueue, pointerQueue, mouseQueue, keyboardQueue) {\n        this._inputSequenceNum++;\n        const Packet = new Packet_1.default(this._inputSequenceNum);\n        Packet.setData(metadataQueue, gamepadQueue, pointerQueue, mouseQueue, keyboardQueue);\n        return Packet.toBuffer();\n    }\n    getGamepadQueue(size = 30) {\n        return this._gamepadFrames.splice(0, (size - 1));\n    }\n    getGamepadQueueLength() {\n        return this._gamepadFrames.length;\n    }\n    queueGamepadState(input) {\n        if (input !== null) {\n            return this._gamepadFrames.push(input);\n        }\n    }\n    queueGamepadStates(inputs) {\n        for (const input in inputs) {\n            this.queueGamepadState(inputs[input]);\n        }\n    }\n    getPointerQueue(size = 2) {\n        return this._pointerFrames.splice(0, (size - 1));\n    }\n    getPointerQueueLength() {\n        return this._pointerFrames.length;\n    }\n    getMouseQueue(size = 30) {\n        return this._mouseFrames.splice(0, (size - 1));\n    }\n    getMouseQueueLength() {\n        return this._mouseFrames.length;\n    }\n    getKeyboardQueue(size = 2) {\n        return this._keyboardFrames.splice(0, (size - 1));\n    }\n    getKeyboardQueueLength() {\n        return this._keyboardFrames.length;\n    }\n    onPointerMove(e) {\n        e.preventDefault();\n        if (this._mouseActive === true && this._mouseLocked === true) {\n            this._mouseStateX = e.movementX;\n            this._mouseStateY = e.movementY;\n            this._mouseStateButtons = e.buttons;\n            this._mouseFrames.push({\n                X: this._mouseStateX * 10,\n                Y: this._mouseStateY * 10,\n                WheelX: 0,\n                WheelY: 0,\n                Buttons: this._mouseStateButtons,\n                Relative: 0, // 0 = Relative, 1 = Absolute\n            });\n        }\n        if (this._touchActive === true) {\n            this._touchLastPointerId = e.pointerId;\n            if (this._touchEvents[e.pointerId] === undefined) {\n                this._touchEvents[e.pointerId] = {\n                    events: [],\n                };\n            }\n            this._touchEvents[e.pointerId].events.push(e);\n        }\n    }\n    requestPointerLockWithUnadjustedMovement(element) {\n        const promise = element.requestPointerLock({\n            unadjustedMovement: true,\n        });\n        if ('keyboard' in navigator && 'lock' in navigator.keyboard) {\n            document.body.requestFullscreen().then(() => {\n                navigator.keyboard.lock();\n            });\n        }\n        return promise.then(() => {\n            console.log('pointer is locked');\n            this._mouseLocked = true;\n        }).catch((error) => {\n            if (error.name === 'NotSupportedError') {\n                this._mouseLocked = true;\n                return element.requestPointerLock();\n            }\n        });\n    }\n    onPointerClick(e) {\n        e.preventDefault();\n        if (e.pointerType === 'touch') {\n            this._mouseActive = false;\n            this._touchActive = true;\n        }\n        else if (e.pointerType === 'mouse') {\n            this._mouseActive = true;\n            this._touchActive = false;\n        }\n        if (this._client._config.input_mousekeyboard === true && this._mouseActive === true && this._mouseLocked === false) {\n            this.requestPointerLockWithUnadjustedMovement(e.target);\n            document.addEventListener('pointerlockchange', () => {\n                if (document.pointerLockElement !== null) {\n                    this._mouseLocked = true;\n                }\n                else {\n                    this._mouseLocked = false;\n                }\n            }, false);\n            document.addEventListener('systemkeyboardlockchanged', event => {\n                console.log(event);\n                // // if (event.systemKeyboardLockEnabled) {\n                // //   console.log('System keyboard lock enabled.')\n                // // } else {\n                // //   console.log('System keyboard lock disabled.')\n                // // }\n            }, false);\n        }\n        else if (this._mouseActive === true && this._mouseLocked === true) {\n            this._mouseStateX = e.movementX;\n            this._mouseStateY = e.movementY;\n            this._mouseStateButtons = e.buttons;\n            this._mouseFrames.push({\n                X: this._mouseStateX * 10,\n                Y: this._mouseStateY * 10,\n                WheelX: 0,\n                WheelY: 0,\n                Buttons: this._mouseStateButtons,\n                Relative: 0, // 0 = Relative, 1 = Absolute\n            });\n        }\n        if (this._touchActive === true) {\n            this._touchLastPointerId = e.pointerId;\n            if (this._touchEvents[e.pointerId] === undefined) {\n                this._touchEvents[e.pointerId] = {\n                    events: [],\n                };\n            }\n            this._touchEvents[e.pointerId].events.push(e);\n        }\n    }\n    onPointerScroll(e) {\n        e.preventDefault();\n        // console.log('got onpointerscroll', e)\n    }\n    onKeyDown(event) {\n        if (this._mouseActive === true && this._mouseLocked === true) {\n            if (this._keyboardButtonsState[event.keyCode] !== true) {\n                this._keyboardButtonsState[event.keyCode] = true;\n                // console.log('keyDown', event.keyCode)\n                this._keyboardFrames.push({\n                    pressed: true,\n                    key: event.key,\n                    keyCode: event.keyCode,\n                });\n                setTimeout(() => {\n                    this._keyboardFrames.push({\n                        pressed: true,\n                        key: event.key,\n                        keyCode: event.keyCode,\n                    });\n                }, 16);\n            }\n        }\n    }\n    onKeyUp(event) {\n        if (this._mouseActive === true && this._mouseLocked === true) {\n            this._keyboardButtonsState[event.keyCode] = false;\n            // console.log('keyUp', event.keyCode)\n            this._keyboardFrames.push({\n                pressed: false,\n                key: event.key,\n                keyCode: event.keyCode,\n            });\n            setTimeout(() => {\n                this._keyboardFrames.push({\n                    pressed: false,\n                    key: event.key,\n                    keyCode: event.keyCode,\n                });\n            }, 16);\n        }\n    }\n    convertAbsoluteMousePositionImpl(e, t, i, n) {\n        let s = i;\n        let a = n;\n        const o = 1920 / 1080;\n        if (o > i / n) {\n            a = s / o;\n            t -= (n - a) / 2;\n        }\n        else {\n            s = a * o;\n            e -= (i - s) / 2;\n        }\n        e *= 65535 / s;\n        t *= 65535 / a;\n        return [e = Math.min(Math.max(Math.round(e), 0), 65535), t = Math.min(Math.max(Math.round(t), 0), 65535)];\n    }\n    _convertToInt16(e) {\n        const int = new Int16Array(1);\n        return int[0] = e, int[0];\n    }\n    _convertToUInt16(e) {\n        const int = new Uint16Array(1);\n        return int[0] = e, int[0];\n    }\n    normalizeTriggerValue(e) {\n        if (e < 0) {\n            return this._convertToUInt16(0);\n        }\n        const t = 65535 * e, a = t > 65535 ? 65535 : t;\n        return this._convertToUInt16(a);\n    }\n    normalizeAxisValue(e) {\n        const t = this._convertToInt16(32767), a = this._convertToInt16(-32767), n = e * t;\n        return n > t ? t : n < a ? a : this._convertToInt16(n);\n    }\n    pressButtonStart(button) {\n        this._client._inputDriver.pressButtonStart(button);\n    }\n    pressButtonEnd(button) {\n        this._client._inputDriver.pressButtonEnd(button);\n    }\n    moveLeftStick(x, y) {\n        this._client._inputDriver.moveLeftStick(x, y);\n    }\n    moveRightStick(x, y) {\n        this._client._inputDriver.moveRightStick(x, y);\n    }\n    destroy() {\n        this._metadataFps.stop();\n        this._inputFps.stop();\n        clearInterval(this._inputInterval);\n        // FIX Android crash due of gamepad polling\n        for (const key in this._rumbleInterval) {\n            if (this._rumbleInterval[key]) {\n                clearInterval(this._rumbleInterval[0]);\n            }\n        }\n        super.destroy();\n    }\n    addProcessedFrame(frame) {\n        frame.frameRenderedTimeMs = performance.now();\n        this._frameMetadataQueue.push(frame);\n    }\n    getMetadataQueue(size = 30) {\n        return this._frameMetadataQueue.splice(0, (size - 1));\n    }\n    getMetadataQueueLength() {\n        return this._frameMetadataQueue.length;\n    }\n}\nexports[\"default\"] = InputChannel;\n//# sourceMappingURL=Input.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Input.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Input/Packet.js":
/*!**********************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Input/Packet.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ReportTypes;\n(function (ReportTypes) {\n    ReportTypes[ReportTypes[\"None\"] = 0] = \"None\";\n    ReportTypes[ReportTypes[\"Metadata\"] = 1] = \"Metadata\";\n    ReportTypes[ReportTypes[\"Gamepad\"] = 2] = \"Gamepad\";\n    ReportTypes[ReportTypes[\"Pointer\"] = 4] = \"Pointer\";\n    ReportTypes[ReportTypes[\"ClientMetadata\"] = 8] = \"ClientMetadata\";\n    ReportTypes[ReportTypes[\"ServerMetadata\"] = 16] = \"ServerMetadata\";\n    ReportTypes[ReportTypes[\"Mouse\"] = 32] = \"Mouse\";\n    ReportTypes[ReportTypes[\"Keyboard\"] = 64] = \"Keyboard\";\n    ReportTypes[ReportTypes[\"Vibration\"] = 128] = \"Vibration\";\n    ReportTypes[ReportTypes[\"Sensor\"] = 256] = \"Sensor\";\n})(ReportTypes || (ReportTypes = {}));\nclass InputPacket {\n    constructor(sequence) {\n        this._reportType = ReportTypes.None;\n        this._totalSize = -1;\n        this._sequence = -1;\n        this._metadataFrames = [];\n        this._gamepadFrames = [];\n        this._pointerFrames = [];\n        this._mouseFrames = [];\n        this._keyboardFrames = [];\n        this._maxTouchpoints = 0;\n        this._sequence = sequence;\n    }\n    setMetadata(maxTouchpoints = 1) {\n        this._reportType = ReportTypes.ClientMetadata;\n        this._totalSize = 15;\n        this._maxTouchpoints = maxTouchpoints;\n    }\n    setData(metadataQueue, gamepadQueue, pointerQueue, mouseQueue, keyboardQueue) {\n        let size = 14;\n        if (metadataQueue.length > 0) {\n            this._reportType |= ReportTypes.Metadata;\n            size = size + this._calculateMetadataSize(metadataQueue);\n            this._metadataFrames = metadataQueue;\n        }\n        if (gamepadQueue.length > 0) {\n            this._reportType |= ReportTypes.Gamepad;\n            size = size + this._calculateGamepadSize(gamepadQueue);\n            this._gamepadFrames = gamepadQueue;\n        }\n        if (pointerQueue.length > 0) {\n            this._reportType |= ReportTypes.Pointer;\n            size = size + this._calculatePointerSize(pointerQueue);\n            this._pointerFrames = pointerQueue;\n        }\n        if (mouseQueue.length > 0) {\n            this._reportType |= ReportTypes.Mouse;\n            size = size + this._calculateMouseSize(mouseQueue);\n            this._mouseFrames = mouseQueue;\n        }\n        if (keyboardQueue.length > 0) {\n            this._reportType |= ReportTypes.Keyboard;\n            size = size + this._calculateKeyboardSize(keyboardQueue);\n            this._keyboardFrames = keyboardQueue;\n        }\n        this._totalSize = size;\n    }\n    _calculateMetadataSize(frames) {\n        return 1 + ((7 * 4) * frames.length);\n    }\n    _calculateGamepadSize(frames) {\n        return 1 + (23 * frames.length);\n    }\n    _calculatePointerSize(frames) {\n        let pointerSize = 1;\n        for (const frame in frames) {\n            pointerSize = pointerSize + 1 + (frames[frame].events.length * 20);\n        }\n        return pointerSize;\n    }\n    _calculateMouseSize(frames) {\n        return 1 + (18 * frames.length);\n    }\n    _calculateKeyboardSize(frames) {\n        return 1 + (3 * frames.length);\n    }\n    _writeMetadataData(packet, offset, frames) {\n        packet.setUint8(offset, frames.length);\n        offset++;\n        if (frames.length >= 30) {\n            console.warn('metadataQueue is bigger then 30. This might impact reliability!');\n        }\n        for (; frames.length > 0;) {\n            // this._metadataFps.count()\n            const frame = frames.shift();\n            const firstFramePacketArrivalTimeMs = frame.firstFramePacketArrivalTimeMs;\n            const frameSubmittedTimeMs = frame.frameSubmittedTimeMs;\n            const frameDecodedTimeMs = frame.frameDecodedTimeMs;\n            const frameRenderedTimeMs = frame.frameRenderedTimeMs;\n            const framePacketTime = performance.now();\n            const frameDateNow = performance.now();\n            packet.setUint32(offset, frame.serverDataKey, true);\n            packet.setUint32(offset + 4, firstFramePacketArrivalTimeMs, true);\n            packet.setUint32(offset + 8, frameSubmittedTimeMs, true);\n            packet.setUint32(offset + 12, frameDecodedTimeMs, true);\n            packet.setUint32(offset + 16, frameRenderedTimeMs, true);\n            packet.setUint32(offset + 20, framePacketTime, true);\n            packet.setUint32(offset + 24, frameDateNow, true);\n            offset += 28;\n        }\n        return offset;\n    }\n    _writeGamepadData(packet, offset, frames) {\n        packet.setUint8(offset, frames.length);\n        offset++;\n        if (frames.length >= 30) {\n            console.warn('gamepadQueue is bigger then 30. This might impact reliability!');\n        }\n        for (; frames.length > 0;) {\n            // this._inputFps.count()\n            const shift = frames.shift();\n            if (shift !== undefined) {\n                const input = shift;\n                packet.setUint8(offset, input.GamepadIndex);\n                offset++;\n                let buttonMask = 0;\n                if (input.Nexus > 0) {\n                    buttonMask |= 2;\n                }\n                if (input.Menu > 0) {\n                    buttonMask |= 4;\n                }\n                if (input.View > 0) {\n                    buttonMask |= 8;\n                }\n                if (input.A > 0) {\n                    buttonMask |= 16;\n                }\n                if (input.B > 0) {\n                    buttonMask |= 32;\n                }\n                if (input.X > 0) {\n                    buttonMask |= 64;\n                }\n                if (input.Y > 0) {\n                    buttonMask |= 128;\n                }\n                if (input.DPadUp > 0) {\n                    buttonMask |= 256;\n                }\n                if (input.DPadDown > 0) {\n                    buttonMask |= 512;\n                }\n                if (input.DPadLeft > 0) {\n                    buttonMask |= 1024;\n                }\n                if (input.DPadRight > 0) {\n                    buttonMask |= 2048;\n                }\n                if (input.LeftShoulder > 0) {\n                    buttonMask |= 4096;\n                }\n                if (input.RightShoulder > 0) {\n                    buttonMask |= 8192;\n                }\n                if (input.LeftThumb > 0) {\n                    buttonMask |= 16384;\n                }\n                if (input.RightThumb > 0) {\n                    buttonMask |= 32768;\n                }\n                packet.setUint16(offset, buttonMask, true);\n                packet.setInt16(offset + 2, this._normalizeAxisValue(input.LeftThumbXAxis), true); // LeftThumbXAxis\n                packet.setInt16(offset + 4, this._normalizeAxisValue(-input.LeftThumbYAxis), true); // LeftThumbYAxis\n                packet.setInt16(offset + 6, this._normalizeAxisValue(input.RightThumbXAxis), true); // RightThumbXAxis\n                packet.setInt16(offset + 8, this._normalizeAxisValue(-input.RightThumbYAxis), true); // RightThumbYAxis\n                packet.setUint16(offset + 10, this._normalizeTriggerValue(input.LeftTrigger), true); // LeftTrigger\n                packet.setUint16(offset + 12, this._normalizeTriggerValue(input.RightTrigger), true); // RightTrigger\n                packet.setUint32(offset + 14, 0, true); // PhysicalPhysicality\n                packet.setUint32(offset + 18, 0, false); // VirtualPhysicality\n                offset += 22;\n            }\n        }\n        return offset;\n    }\n    _writePointerData(packet, offset, frames) {\n        packet.setUint8(offset, 1);\n        // packet.setUint8(offset, frames.length)\n        offset++;\n        if (frames.length >= 2) {\n            console.warn('pointerQueue is bigger then 1. Only one event will be sent.');\n        }\n        // for (; frames.length > 0;) {\n        // this._inputFps.count()\n        const shift = frames.shift();\n        if (shift !== undefined) {\n            packet.setUint8(offset, shift.events.length);\n            offset++;\n            const screenWidth = 1920 * 2;\n            const screenHeight = 1080 * 2;\n            for (const event in shift.events) {\n                const rect = shift.events[event].target.getBoundingClientRect();\n                let e = 0.06575749909301447 * (screenHeight / 1), n = 0.06575749909301447 * (screenWidth / 1);\n                e = 1, n = 1;\n                if (shift.events[event].type === 'pointerup') {\n                    e = 0;\n                    n = 0;\n                }\n                packet.setUint16(offset, e, true);\n                packet.setUint16(offset + 2, n, true);\n                packet.setUint8(offset + 4, 255 * shift.events[event].pressure);\n                packet.setUint16(offset + 5, shift.events[event].twist, true);\n                packet.setUint32(offset + 7, 0, true);\n                let o = (shift.events[event].x - rect.left) * (screenWidth / rect.width), l = (shift.events[event].y - rect.top) * (screenHeight / rect.height);\n                if (shift.events[event].type === 'pointerup') {\n                    // Reset x and y to 0 on pointerup\n                    o = 0;\n                    l = 0;\n                }\n                packet.setUint32(offset + 11, o, true);\n                packet.setUint32(offset + 15, l, true);\n                packet.setUint8(offset + 19, (shift.events[event].type === 'pointerdown') ? 1 :\n                    (shift.events[event].type === 'pointerup') ? 2 : (shift.events[event].type === 'pointermove') ? 3 : 0);\n                offset = offset + 20;\n                // console.log('Sending event: ', shift.events[event], pointer, e, n, o, l, rect)\n            }\n        }\n        // }\n        return offset;\n    }\n    _writeMouseData(packet, offset, frames) {\n        packet.setUint8(offset, frames.length);\n        offset++;\n        if (frames.length >= 30) {\n            console.warn('mouseQueue is bigger then 30. This might impact reliability!');\n        }\n        for (; frames.length > 0;) {\n            // this._inputFps.count()\n            const shift = frames.shift();\n            if (shift !== undefined) {\n                const input = shift;\n                packet.setUint32(offset, input.X, true);\n                packet.setUint32(offset + 4, input.Y, true);\n                packet.setUint32(offset + 8, input.WheelX, true);\n                packet.setUint32(offset + 12, input.WheelY, true);\n                packet.setUint8(offset + 16, input.Buttons);\n                packet.setUint8(offset + 17, input.Relative);\n                offset += 18;\n            }\n        }\n        return offset;\n    }\n    _writeKeyboardData(packet, offset, frames) {\n        packet.setUint8(offset, frames.length);\n        offset++;\n        if (frames.length >= 30) {\n            console.warn('keyboardQueue is bigger then 30. This might impact reliability!');\n        }\n        for (; frames.length > 0;) {\n            // this._inputFps.count()\n            const shift = frames.shift();\n            if (shift !== undefined) {\n                const input = shift;\n                packet.setUint8(offset, 2); // 1 = Known, 2 = VKey, 3 = AppCommand, 0 = Unknown\n                packet.setUint8(offset + 1, input.pressed ? 1 : 0);\n                packet.setUint8(offset + 2, input.keyCode);\n                // packet.setUint8(offset+3, 1)\n                // packet.setUint8(offset+4, input.keyCode)\n                offset += 3;\n            }\n        }\n        return offset;\n    }\n    toBuffer() {\n        const metadataAlloc = new Uint8Array(this._totalSize);\n        const packet = new DataView(metadataAlloc.buffer);\n        packet.setUint16(0, this._reportType, true);\n        packet.setUint32(2, this._sequence, true);\n        packet.setFloat64(6, performance.now(), true);\n        let offset = 14;\n        if (this._metadataFrames.length > 0) {\n            offset = this._writeMetadataData(packet, offset, this._metadataFrames);\n        }\n        if (this._gamepadFrames.length > 0) {\n            offset = this._writeGamepadData(packet, offset, this._gamepadFrames);\n        }\n        if (this._pointerFrames.length > 0) {\n            offset = this._writePointerData(packet, offset, this._pointerFrames);\n        }\n        if (this._mouseFrames.length > 0) {\n            offset = this._writeMouseData(packet, offset, this._mouseFrames);\n        }\n        if (this._keyboardFrames.length > 0) {\n            offset = this._writeKeyboardData(packet, offset, this._keyboardFrames);\n        }\n        if (this._reportType === ReportTypes.ClientMetadata) {\n            packet.setUint8(offset, this._maxTouchpoints);\n            offset++;\n        }\n        if (offset !== offset) {\n            throw new Error('Packet length mismatch. Something is wrong!');\n        }\n        return packet;\n    }\n    _normalizeTriggerValue(e) {\n        if (e < 0) {\n            return this._convertToUInt16(0);\n        }\n        const t = 65535 * e, a = t > 65535 ? 65535 : t;\n        return this._convertToUInt16(a);\n    }\n    _normalizeAxisValue(e) {\n        const t = this._convertToInt16(32767), a = this._convertToInt16(-32767), n = e * t;\n        return n > t ? t : n < a ? a : this._convertToInt16(n);\n    }\n    _convertToInt16(e) {\n        const int = new Int16Array(1);\n        return int[0] = e, int[0];\n    }\n    _convertToUInt16(e) {\n        const int = new Uint16Array(1);\n        return int[0] = e, int[0];\n    }\n}\nexports[\"default\"] = InputPacket;\n//# sourceMappingURL=Packet.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Input/Packet.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Channel/Message.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Channel/Message.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Base_1 = __importDefault(__webpack_require__(/*! ./Base */ \"../node_modules/xstreaming-player/dist/Channel/Base.js\"));\nclass MessageChannel extends Base_1.default {\n    onOpen(event) {\n        super.onOpen(event);\n        // console.log('xStreamingPlayer Channel/Message.ts - ['+this._channelName+'] onOpen:', event)\n        const handshake = JSON.stringify({\n            'type': 'Handshake',\n            'version': 'messageV1',\n            'id': 'f9c5f412-0e69-4ede-8e62-92c7f5358c56',\n            'cv': '',\n        });\n        this.send(handshake);\n    }\n    onMessage(event) {\n        console.log('xStreamingPlayer Channel/Message.ts - [' + this._channelName + '] onMessage:', event);\n        const jsonMessage = JSON.parse(event.data);\n        console.log('xStreamingPlayer Channel/Message.ts - Received json:', jsonMessage);\n        if (jsonMessage.type === 'HandshakeAck') {\n            // Handshake has been acked.\n            this.getClient().getChannelProcessor('control').start();\n            this.getClient().getChannelProcessor('input').start();\n            const systemUis = this.getClient()._config.ui_systemui || [10, 19, 31, 27, 32, -41];\n            const systemVersion = this.getClient()._config.ui_version || [0, 1, 0];\n            const uiConfig = JSON.stringify(this.generateMessage('/streaming/systemUi/configuration', {\n                'version': systemVersion,\n                'systemUis': systemUis, // Xbox Windows app has [33], xCloud has [10,19,31,27,32,-41]\n                // 10 = ShowVirtualKeyboard\n                // 19 = ShowMessageDialog\n                // 31 = ShowApplication\n                // 27 = ShowPurchase\n                // 32 = ShowTimerExtensions\n                // 33 = Xbox windows app, disables the nexus menu on xCloud (Alt nexus menu?)\n                // -44 = unknown\n                // 40 = unknown\n                // 41 = unknown\n                // -43 = unknown\n                // Possible options: Keyboard, PurchaseModal\n            }));\n            this.send(uiConfig);\n            const clientConfig = JSON.stringify(this.generateMessage('/streaming/properties/clientappinstallidchanged', { 'clientAppInstallId': 'c11ddb2e-c7e3-4f02-a62b-fd5448e0b851' }));\n            this.send(clientConfig);\n            const orientationConfig = JSON.stringify(this.generateMessage('/streaming/characteristics/orientationchanged', { 'orientation': 0 }));\n            this.send(orientationConfig);\n            const touchConfig = JSON.stringify(this.generateMessage('/streaming/characteristics/touchinputenabledchanged', { 'touchInputEnabled': this.getClient()._config.input_touch }));\n            this.send(touchConfig);\n            const deviceConfig = JSON.stringify(this.generateMessage('/streaming/characteristics/clientdevicecapabilities', {}));\n            this.send(deviceConfig);\n            const dimensionsConfig = JSON.stringify(this.generateMessage('/streaming/characteristics/dimensionschanged', {\n                'horizontal': 1920,\n                'vertical': 1080,\n                'preferredWidth': 1920,\n                'preferredHeight': 1080,\n                'safeAreaLeft': 0,\n                'safeAreaTop': 0,\n                'safeAreaRight': 1920,\n                'safeAreaBottom': 1080,\n                'supportsCustomResolution': true,\n            }));\n            this.send(dimensionsConfig);\n        }\n        this.getClient().getEventBus().emit('message', {\n            ...jsonMessage,\n        });\n    }\n    onClose(event) {\n        super.onClose(event);\n        // console.log('xStreamingPlayer Channel/Message.ts - ['+this._channelName+'] onClose:', event)\n    }\n    generateMessage(path, data) {\n        return {\n            'type': 'Message',\n            'content': JSON.stringify(data),\n            'id': '41f93d5a-900f-4d33-b7a1-2d4ca6747072',\n            'target': path,\n            'cv': '',\n        };\n    }\n    sendTransaction(id, data) {\n        const transaction = JSON.stringify({\n            'type': 'TransactionComplete',\n            'content': JSON.stringify(data),\n            // 'content':'{\\'Result\\':0}',\n            'id': id,\n            'cv': '',\n        });\n        this.send(transaction);\n    }\n}\nexports[\"default\"] = MessageChannel;\n//# sourceMappingURL=Message.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ2hhbm5lbC9NZXNzYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCLG1CQUFPLENBQUMsc0VBQVE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwwSEFBMEgsOERBQThEO0FBQ3hMO0FBQ0EsNkhBQTZILGtCQUFrQjtBQUMvSTtBQUNBLDZIQUE2SCwyREFBMkQ7QUFDeEw7QUFDQSw4SEFBOEg7QUFDOUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsYUFBYTtBQUN4QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy94c3RyZWFtaW5nLXBsYXllci9kaXN0L0NoYW5uZWwvTWVzc2FnZS5qcz8zOGY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgQmFzZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0Jhc2VcIikpO1xuY2xhc3MgTWVzc2FnZUNoYW5uZWwgZXh0ZW5kcyBCYXNlXzEuZGVmYXVsdCB7XG4gICAgb25PcGVuKGV2ZW50KSB7XG4gICAgICAgIHN1cGVyLm9uT3BlbihldmVudCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd4U3RyZWFtaW5nUGxheWVyIENoYW5uZWwvTWVzc2FnZS50cyAtIFsnK3RoaXMuX2NoYW5uZWxOYW1lKyddIG9uT3BlbjonLCBldmVudClcbiAgICAgICAgY29uc3QgaGFuZHNoYWtlID0gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgJ3R5cGUnOiAnSGFuZHNoYWtlJyxcbiAgICAgICAgICAgICd2ZXJzaW9uJzogJ21lc3NhZ2VWMScsXG4gICAgICAgICAgICAnaWQnOiAnZjljNWY0MTItMGU2OS00ZWRlLThlNjItOTJjN2Y1MzU4YzU2JyxcbiAgICAgICAgICAgICdjdic6ICcnLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zZW5kKGhhbmRzaGFrZSk7XG4gICAgfVxuICAgIG9uTWVzc2FnZShldmVudCkge1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL01lc3NhZ2UudHMgLSBbJyArIHRoaXMuX2NoYW5uZWxOYW1lICsgJ10gb25NZXNzYWdlOicsIGV2ZW50KTtcbiAgICAgICAgY29uc3QganNvbk1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL01lc3NhZ2UudHMgLSBSZWNlaXZlZCBqc29uOicsIGpzb25NZXNzYWdlKTtcbiAgICAgICAgaWYgKGpzb25NZXNzYWdlLnR5cGUgPT09ICdIYW5kc2hha2VBY2snKSB7XG4gICAgICAgICAgICAvLyBIYW5kc2hha2UgaGFzIGJlZW4gYWNrZWQuXG4gICAgICAgICAgICB0aGlzLmdldENsaWVudCgpLmdldENoYW5uZWxQcm9jZXNzb3IoJ2NvbnRyb2wnKS5zdGFydCgpO1xuICAgICAgICAgICAgdGhpcy5nZXRDbGllbnQoKS5nZXRDaGFubmVsUHJvY2Vzc29yKCdpbnB1dCcpLnN0YXJ0KCk7XG4gICAgICAgICAgICBjb25zdCBzeXN0ZW1VaXMgPSB0aGlzLmdldENsaWVudCgpLl9jb25maWcudWlfc3lzdGVtdWkgfHwgWzEwLCAxOSwgMzEsIDI3LCAzMiwgLTQxXTtcbiAgICAgICAgICAgIGNvbnN0IHN5c3RlbVZlcnNpb24gPSB0aGlzLmdldENsaWVudCgpLl9jb25maWcudWlfdmVyc2lvbiB8fCBbMCwgMSwgMF07XG4gICAgICAgICAgICBjb25zdCB1aUNvbmZpZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2VuZXJhdGVNZXNzYWdlKCcvc3RyZWFtaW5nL3N5c3RlbVVpL2NvbmZpZ3VyYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgJ3ZlcnNpb24nOiBzeXN0ZW1WZXJzaW9uLFxuICAgICAgICAgICAgICAgICdzeXN0ZW1VaXMnOiBzeXN0ZW1VaXMsIC8vIFhib3ggV2luZG93cyBhcHAgaGFzIFszM10sIHhDbG91ZCBoYXMgWzEwLDE5LDMxLDI3LDMyLC00MV1cbiAgICAgICAgICAgICAgICAvLyAxMCA9IFNob3dWaXJ0dWFsS2V5Ym9hcmRcbiAgICAgICAgICAgICAgICAvLyAxOSA9IFNob3dNZXNzYWdlRGlhbG9nXG4gICAgICAgICAgICAgICAgLy8gMzEgPSBTaG93QXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICAvLyAyNyA9IFNob3dQdXJjaGFzZVxuICAgICAgICAgICAgICAgIC8vIDMyID0gU2hvd1RpbWVyRXh0ZW5zaW9uc1xuICAgICAgICAgICAgICAgIC8vIDMzID0gWGJveCB3aW5kb3dzIGFwcCwgZGlzYWJsZXMgdGhlIG5leHVzIG1lbnUgb24geENsb3VkIChBbHQgbmV4dXMgbWVudT8pXG4gICAgICAgICAgICAgICAgLy8gLTQ0ID0gdW5rbm93blxuICAgICAgICAgICAgICAgIC8vIDQwID0gdW5rbm93blxuICAgICAgICAgICAgICAgIC8vIDQxID0gdW5rbm93blxuICAgICAgICAgICAgICAgIC8vIC00MyA9IHVua25vd25cbiAgICAgICAgICAgICAgICAvLyBQb3NzaWJsZSBvcHRpb25zOiBLZXlib2FyZCwgUHVyY2hhc2VNb2RhbFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy5zZW5kKHVpQ29uZmlnKTtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudENvbmZpZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2VuZXJhdGVNZXNzYWdlKCcvc3RyZWFtaW5nL3Byb3BlcnRpZXMvY2xpZW50YXBwaW5zdGFsbGlkY2hhbmdlZCcsIHsgJ2NsaWVudEFwcEluc3RhbGxJZCc6ICdjMTFkZGIyZS1jN2UzLTRmMDItYTYyYi1mZDU0NDhlMGI4NTEnIH0pKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZChjbGllbnRDb25maWcpO1xuICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25Db25maWcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdlbmVyYXRlTWVzc2FnZSgnL3N0cmVhbWluZy9jaGFyYWN0ZXJpc3RpY3Mvb3JpZW50YXRpb25jaGFuZ2VkJywgeyAnb3JpZW50YXRpb24nOiAwIH0pKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZChvcmllbnRhdGlvbkNvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCB0b3VjaENvbmZpZyA9IEpTT04uc3RyaW5naWZ5KHRoaXMuZ2VuZXJhdGVNZXNzYWdlKCcvc3RyZWFtaW5nL2NoYXJhY3RlcmlzdGljcy90b3VjaGlucHV0ZW5hYmxlZGNoYW5nZWQnLCB7ICd0b3VjaElucHV0RW5hYmxlZCc6IHRoaXMuZ2V0Q2xpZW50KCkuX2NvbmZpZy5pbnB1dF90b3VjaCB9KSk7XG4gICAgICAgICAgICB0aGlzLnNlbmQodG91Y2hDb25maWcpO1xuICAgICAgICAgICAgY29uc3QgZGV2aWNlQ29uZmlnID0gSlNPTi5zdHJpbmdpZnkodGhpcy5nZW5lcmF0ZU1lc3NhZ2UoJy9zdHJlYW1pbmcvY2hhcmFjdGVyaXN0aWNzL2NsaWVudGRldmljZWNhcGFiaWxpdGllcycsIHt9KSk7XG4gICAgICAgICAgICB0aGlzLnNlbmQoZGV2aWNlQ29uZmlnKTtcbiAgICAgICAgICAgIGNvbnN0IGRpbWVuc2lvbnNDb25maWcgPSBKU09OLnN0cmluZ2lmeSh0aGlzLmdlbmVyYXRlTWVzc2FnZSgnL3N0cmVhbWluZy9jaGFyYWN0ZXJpc3RpY3MvZGltZW5zaW9uc2NoYW5nZWQnLCB7XG4gICAgICAgICAgICAgICAgJ2hvcml6b250YWwnOiAxOTIwLFxuICAgICAgICAgICAgICAgICd2ZXJ0aWNhbCc6IDEwODAsXG4gICAgICAgICAgICAgICAgJ3ByZWZlcnJlZFdpZHRoJzogMTkyMCxcbiAgICAgICAgICAgICAgICAncHJlZmVycmVkSGVpZ2h0JzogMTA4MCxcbiAgICAgICAgICAgICAgICAnc2FmZUFyZWFMZWZ0JzogMCxcbiAgICAgICAgICAgICAgICAnc2FmZUFyZWFUb3AnOiAwLFxuICAgICAgICAgICAgICAgICdzYWZlQXJlYVJpZ2h0JzogMTkyMCxcbiAgICAgICAgICAgICAgICAnc2FmZUFyZWFCb3R0b20nOiAxMDgwLFxuICAgICAgICAgICAgICAgICdzdXBwb3J0c0N1c3RvbVJlc29sdXRpb24nOiB0cnVlLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy5zZW5kKGRpbWVuc2lvbnNDb25maWcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50KCkuZ2V0RXZlbnRCdXMoKS5lbWl0KCdtZXNzYWdlJywge1xuICAgICAgICAgICAgLi4uanNvbk1lc3NhZ2UsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbkNsb3NlKGV2ZW50KSB7XG4gICAgICAgIHN1cGVyLm9uQ2xvc2UoZXZlbnQpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDaGFubmVsL01lc3NhZ2UudHMgLSBbJyt0aGlzLl9jaGFubmVsTmFtZSsnXSBvbkNsb3NlOicsIGV2ZW50KVxuICAgIH1cbiAgICBnZW5lcmF0ZU1lc3NhZ2UocGF0aCwgZGF0YSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3R5cGUnOiAnTWVzc2FnZScsXG4gICAgICAgICAgICAnY29udGVudCc6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICAgICAgJ2lkJzogJzQxZjkzZDVhLTkwMGYtNGQzMy1iN2ExLTJkNGNhNjc0NzA3MicsXG4gICAgICAgICAgICAndGFyZ2V0JzogcGF0aCxcbiAgICAgICAgICAgICdjdic6ICcnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzZW5kVHJhbnNhY3Rpb24oaWQsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAndHlwZSc6ICdUcmFuc2FjdGlvbkNvbXBsZXRlJyxcbiAgICAgICAgICAgICdjb250ZW50JzogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICAvLyAnY29udGVudCc6J3tcXCdSZXN1bHRcXCc6MH0nLFxuICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAnY3YnOiAnJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2VuZCh0cmFuc2FjdGlvbik7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gTWVzc2FnZUNoYW5uZWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1NZXNzYWdlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Channel/Message.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Component/Audio.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Component/Audio.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass AudioComponent {\n    constructor(client) {\n        this._client = client;\n    }\n    create(srcObject) {\n        console.log('xStreamingPlayer Component/Audio.ts - Create media element');\n        const audioHolder = document.getElementById(this._client._elementHolder);\n        if (audioHolder !== null) {\n            const audioRender = document.createElement('audio');\n            audioRender.id = this.getElementId();\n            audioRender.srcObject = srcObject;\n            // audioRender.play()\n            audioRender.autoplay = true;\n            this._audioRender = audioRender;\n            audioHolder.appendChild(audioRender);\n        }\n        else {\n            console.log('xStreamingPlayer Component/Audio.ts - Error fetching audioholder: div#' + this._client._elementHolder);\n        }\n        console.log('xStreamingPlayer Component/Audio.ts - Media element created');\n    }\n    getElementId() {\n        return 'xStreamingPlayer_' + this._client._elementHolderRandom + '_audioRender';\n    }\n    getSource() {\n        return this._audioSource;\n    }\n    createMediaSource() {\n        const mediaSource = new MediaSource();\n        const audioSourceUrl = window.URL.createObjectURL(mediaSource);\n        mediaSource.addEventListener('sourceopen', () => {\n            console.log('xStreamingPlayer Component/Audio.ts - MediaSource opened. Attaching audioSourceBuffer...');\n            // if safari?\n            let codec = 'audio/webm;codecs=opus';\n            if (this._isSafari()) {\n                codec = 'audio/mp4'; // @TODO: Fix audio issues on Safari\n            }\n            const audioSourceBuffer = mediaSource.addSourceBuffer(codec);\n            audioSourceBuffer.mode = 'sequence';\n            audioSourceBuffer.addEventListener('error', (event) => {\n                console.log('xStreamingPlayer Component/Audio.ts - Error audio...', event);\n            });\n            this._audioSource = audioSourceBuffer;\n        });\n        this._mediaSource = mediaSource;\n        return audioSourceUrl;\n    }\n    destroy() {\n        var _a;\n        if (this._audioRender) {\n            this._audioRender.pause();\n            this._audioRender.remove();\n        }\n        delete this._mediaSource;\n        delete this._audioRender;\n        delete this._audioSource;\n        (_a = document.getElementById(this.getElementId())) === null || _a === void 0 ? void 0 : _a.remove();\n        console.log('xStreamingPlayer Component/Audio.ts - Cleaning up audio element');\n    }\n    _isSafari() {\n        return (navigator.userAgent.search('Safari') >= 0 && navigator.userAgent.search('Chrome') < 0);\n    }\n}\nexports[\"default\"] = AudioComponent;\n//# sourceMappingURL=Audio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ29tcG9uZW50L0F1ZGlvLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvQ29tcG9uZW50L0F1ZGlvLmpzP2UwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBBdWRpb0NvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuX2NsaWVudCA9IGNsaWVudDtcbiAgICB9XG4gICAgY3JlYXRlKHNyY09iamVjdCkge1xuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDb21wb25lbnQvQXVkaW8udHMgLSBDcmVhdGUgbWVkaWEgZWxlbWVudCcpO1xuICAgICAgICBjb25zdCBhdWRpb0hvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuX2NsaWVudC5fZWxlbWVudEhvbGRlcik7XG4gICAgICAgIGlmIChhdWRpb0hvbGRlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgYXVkaW9SZW5kZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhdWRpbycpO1xuICAgICAgICAgICAgYXVkaW9SZW5kZXIuaWQgPSB0aGlzLmdldEVsZW1lbnRJZCgpO1xuICAgICAgICAgICAgYXVkaW9SZW5kZXIuc3JjT2JqZWN0ID0gc3JjT2JqZWN0O1xuICAgICAgICAgICAgLy8gYXVkaW9SZW5kZXIucGxheSgpXG4gICAgICAgICAgICBhdWRpb1JlbmRlci5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9hdWRpb1JlbmRlciA9IGF1ZGlvUmVuZGVyO1xuICAgICAgICAgICAgYXVkaW9Ib2xkZXIuYXBwZW5kQ2hpbGQoYXVkaW9SZW5kZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ29tcG9uZW50L0F1ZGlvLnRzIC0gRXJyb3IgZmV0Y2hpbmcgYXVkaW9ob2xkZXI6IGRpdiMnICsgdGhpcy5fY2xpZW50Ll9lbGVtZW50SG9sZGVyKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBDb21wb25lbnQvQXVkaW8udHMgLSBNZWRpYSBlbGVtZW50IGNyZWF0ZWQnKTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudElkKCkge1xuICAgICAgICByZXR1cm4gJ3hTdHJlYW1pbmdQbGF5ZXJfJyArIHRoaXMuX2NsaWVudC5fZWxlbWVudEhvbGRlclJhbmRvbSArICdfYXVkaW9SZW5kZXInO1xuICAgIH1cbiAgICBnZXRTb3VyY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdWRpb1NvdXJjZTtcbiAgICB9XG4gICAgY3JlYXRlTWVkaWFTb3VyY2UoKSB7XG4gICAgICAgIGNvbnN0IG1lZGlhU291cmNlID0gbmV3IE1lZGlhU291cmNlKCk7XG4gICAgICAgIGNvbnN0IGF1ZGlvU291cmNlVXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobWVkaWFTb3VyY2UpO1xuICAgICAgICBtZWRpYVNvdXJjZS5hZGRFdmVudExpc3RlbmVyKCdzb3VyY2VvcGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ29tcG9uZW50L0F1ZGlvLnRzIC0gTWVkaWFTb3VyY2Ugb3BlbmVkLiBBdHRhY2hpbmcgYXVkaW9Tb3VyY2VCdWZmZXIuLi4nKTtcbiAgICAgICAgICAgIC8vIGlmIHNhZmFyaT9cbiAgICAgICAgICAgIGxldCBjb2RlYyA9ICdhdWRpby93ZWJtO2NvZGVjcz1vcHVzJztcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1NhZmFyaSgpKSB7XG4gICAgICAgICAgICAgICAgY29kZWMgPSAnYXVkaW8vbXA0JzsgLy8gQFRPRE86IEZpeCBhdWRpbyBpc3N1ZXMgb24gU2FmYXJpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhdWRpb1NvdXJjZUJ1ZmZlciA9IG1lZGlhU291cmNlLmFkZFNvdXJjZUJ1ZmZlcihjb2RlYyk7XG4gICAgICAgICAgICBhdWRpb1NvdXJjZUJ1ZmZlci5tb2RlID0gJ3NlcXVlbmNlJztcbiAgICAgICAgICAgIGF1ZGlvU291cmNlQnVmZmVyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ29tcG9uZW50L0F1ZGlvLnRzIC0gRXJyb3IgYXVkaW8uLi4nLCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX2F1ZGlvU291cmNlID0gYXVkaW9Tb3VyY2VCdWZmZXI7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9tZWRpYVNvdXJjZSA9IG1lZGlhU291cmNlO1xuICAgICAgICByZXR1cm4gYXVkaW9Tb3VyY2VVcmw7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuX2F1ZGlvUmVuZGVyKSB7XG4gICAgICAgICAgICB0aGlzLl9hdWRpb1JlbmRlci5wYXVzZSgpO1xuICAgICAgICAgICAgdGhpcy5fYXVkaW9SZW5kZXIucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX21lZGlhU291cmNlO1xuICAgICAgICBkZWxldGUgdGhpcy5fYXVkaW9SZW5kZXI7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9hdWRpb1NvdXJjZTtcbiAgICAgICAgKF9hID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5nZXRFbGVtZW50SWQoKSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmUoKTtcbiAgICAgICAgY29uc29sZS5sb2coJ3hTdHJlYW1pbmdQbGF5ZXIgQ29tcG9uZW50L0F1ZGlvLnRzIC0gQ2xlYW5pbmcgdXAgYXVkaW8gZWxlbWVudCcpO1xuICAgIH1cbiAgICBfaXNTYWZhcmkoKSB7XG4gICAgICAgIHJldHVybiAobmF2aWdhdG9yLnVzZXJBZ2VudC5zZWFyY2goJ1NhZmFyaScpID49IDAgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5zZWFyY2goJ0Nocm9tZScpIDwgMCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXVkaW9Db21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdWRpby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Component/Audio.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Component/Video.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Component/Video.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst FpsCounter_1 = __importDefault(__webpack_require__(/*! ../Helper/FpsCounter */ \"../node_modules/xstreaming-player/dist/Helper/FpsCounter.js\"));\nglobalThis.resolution = '';\nclass VideoComponent {\n    constructor(client) {\n        this._client = client;\n    }\n    create(srcObject) {\n        console.log('xStreamingPlayer Component/Video.ts - Create media element');\n        this._videoFps = new FpsCounter_1.default(this._client, 'video');\n        const videoHolder = document.getElementById(this._client._elementHolder);\n        if (videoHolder !== null) {\n            const videoRender = document.createElement('video');\n            videoRender.id = this.getElementId();\n            videoRender.srcObject = srcObject;\n            videoRender.style.touchAction = 'none';\n            videoRender.style.width = '100%';\n            videoRender.style.height = '100%';\n            if (this._client._video_format === 'Stretch') {\n                videoRender.style.objectFit = 'fill';\n            }\n            else if (this._client._video_format === 'Zoom') {\n                videoRender.style.objectFit = 'cover';\n            }\n            else {\n                videoRender.style.objectFit = 'contain';\n            }\n            // videoRender.style.backgroundColor = 'black'\n            // videoRender.muted = true\n            videoRender.autoplay = true;\n            videoRender.muted = true;\n            videoRender.playsInline = true;\n            // videoHolder.style.aspectRatio = '16 / 9'\n            videoRender.addEventListener('loadedmetadata', () => {\n                const videoWidth = videoRender.videoWidth;\n                const videoHeight = videoRender.videoHeight;\n                globalThis.resolution = videoWidth + ' x ' + videoHeight;\n            });\n            videoRender.onclick = () => {\n                videoRender.play();\n                this._client._audioComponent._audioRender.play();\n            };\n            const serverDataLoop = (t, i) => {\n                videoRender.requestVideoFrameCallback(serverDataLoop);\n                this._videoFps.count();\n                this._client.getChannelProcessor('input').addProcessedFrame({\n                    serverDataKey: i.rtpTimestamp,\n                    firstFramePacketArrivalTimeMs: i.receiveTime,\n                    frameSubmittedTimeMs: i.receiveTime,\n                    frameDecodedTimeMs: i.expectedDisplayTime,\n                    frameRenderedTimeMs: i.expectedDisplayTime,\n                });\n            };\n            videoRender.requestVideoFrameCallback(serverDataLoop);\n            this._videoRender = videoRender;\n            videoHolder.appendChild(videoRender);\n            this._videoFps.start();\n            // Pointer / Mouse events\n            videoRender.addEventListener('pointermove', (e) => this._client.getChannelProcessor('input').onPointerMove(e), { passive: false }),\n                videoRender.addEventListener('pointerdown', (e) => this._client.getChannelProcessor('input').onPointerClick(e), { passive: false }),\n                videoRender.addEventListener('pointerup', (e) => this._client.getChannelProcessor('input').onPointerClick(e), { passive: false }),\n                videoRender.addEventListener('wheel', (e) => this._client.getChannelProcessor('input').onPointerScroll(e), { passive: false });\n            // Keyboard events\n            window.addEventListener('keydown', (e) => { this._client.getChannelProcessor('input').onKeyDown(e); });\n            window.addEventListener('keyup', (e) => { this._client.getChannelProcessor('input').onKeyUp(e); });\n            // videoHolder.addEventListener(\"touchmove\", (e) => this._client.getChannelProcessor('input').onPointerMove(e)),\n            // videoHolder.addEventListener(\"touchstart\", (e) => this._client.getChannelProcessor('input').onPointerClick(e)),\n            // videoHolder.addEventListener(\"touchend\", (e) => this._client.getChannelProcessor('input').onPointerClick(e)),\n            videoRender.play().then(() => {\n                //\n            }).catch((error) => {\n                console.log('xStreamingPlayer Component/Video.ts - Error executing play() on videoRender:', error);\n            });\n        }\n        else {\n            console.log('xStreamingPlayer Component/Video.ts - Error fetching videoholder: div#' + this._client._elementHolder);\n        }\n        console.log('xStreamingPlayer Component/Video.ts - Media element created');\n    }\n    getElementId() {\n        return 'xStreamingPlayer_' + this._client._elementHolderRandom + '_videoRender';\n    }\n    getSource() {\n        return this._videoSource;\n    }\n    createMediaSource() {\n        const mediaSource = new MediaSource(); // @TODO: MediaSource (MSE) is not available on iOS. \n        const videoSourceUrl = window.URL.createObjectURL(mediaSource);\n        mediaSource.addEventListener('sourceopen', () => {\n            console.log('xStreamingPlayer Component/Video.ts - MediaSource opened. Attaching videoSourceBuffer...');\n            const videoSourceBuffer = mediaSource.addSourceBuffer('video/mp4; codecs=\"avc1.42c020\"');\n            videoSourceBuffer.mode = 'sequence';\n            videoSourceBuffer.addEventListener('error', (event) => {\n                console.log('xStreamingPlayer Component/Video.ts - Error video...', event);\n            });\n            this._videoSource = videoSourceBuffer;\n        });\n        this._mediaSource = mediaSource;\n        return videoSourceUrl;\n    }\n    destroy() {\n        var _a;\n        if (this._videoRender) {\n            this._videoRender.pause();\n            this._videoRender.remove();\n        }\n        this._videoFps.stop();\n        delete this._mediaSource;\n        delete this._videoRender;\n        delete this._videoSource;\n        (_a = document.getElementById(this.getElementId())) === null || _a === void 0 ? void 0 : _a.remove();\n        console.log('xStreamingPlayer Component/Video.ts - Cleaning up Video element');\n    }\n}\nexports[\"default\"] = VideoComponent;\n//# sourceMappingURL=Video.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Component/Video.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Driver/Gamepad.js":
/*!****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Driver/Gamepad.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst KEYCODE_KEY_N = 'n';\nclass GamepadDriver {\n    constructor() {\n        this._application = null;\n        this._shadowGamepad = {\n            A: 0,\n            B: 0,\n            X: 0,\n            Y: 0,\n            LeftShoulder: 0,\n            RightShoulder: 0,\n            LeftTrigger: 0,\n            RightTrigger: 0,\n            View: 0,\n            Menu: 0,\n            LeftThumb: 0,\n            RightThumb: 0,\n            DPadUp: 0,\n            DPadDown: 0,\n            DPadLeft: 0,\n            DPadRight: 0,\n            Nexus: 0,\n            LeftThumbXAxis: 0.0,\n            LeftThumbYAxis: 0.0,\n            RightThumbXAxis: 0.0,\n            RightThumbYAxis: 0.0,\n        };\n        this._gamepad_mapping = {\n            'A': '0',\n            'B': '1',\n            'X': '2',\n            'Y': '3',\n            'DPadUp': '12',\n            'DPadDown': '13',\n            'DPadLeft': '14',\n            'DPadRight': '15',\n            'LeftShoulder': '4',\n            'RightShoulder': '5',\n            'LeftThumb': '10',\n            'RightThumb': '11',\n            'LeftTrigger': '6',\n            'RightTrigger': '7',\n            'Menu': '9',\n            'View': '8',\n            'Nexus': '16',\n        };\n        this._gamepad_axes_mapping = {\n            'LeftThumbXAxis': '0',\n            'LeftThumbYAxis': '1',\n            'RightThumbXAxis': '2',\n            'RightThumbYAxis': '3',\n        };\n        this._activeGamepads = { 0: false, 1: false, 2: false, 3: false };\n        this._nexusOverrideN = false;\n        this._isVirtualButtonPressing = false;\n        this._downFunc = (e) => { this.onKeyChange(e, true); };\n        this._upFunc = (e) => { this.onKeyChange(e, false); };\n    }\n    // constructor() {\n    // }\n    setApplication(application) {\n        this._application = application;\n    }\n    start() {\n        this._activeGamepads = { 0: false, 1: false, 2: false, 3: false };\n        // console.log('xStreamingPlayer Driver/Gamepad.ts - Start collecting events:', this._gamepads)\n        this._activeGamepadsInterval = setInterval(() => {\n            var _a, _b, _c;\n            const gamepads = navigator.getGamepads();\n            for (let gamepad = 0; gamepad < gamepads.length; gamepad++) {\n                // Skip gamepad 0 as we always keep this one connected\n                if (gamepad === 0) {\n                    return;\n                }\n                // Check if the control channel is open\n                if (((_a = this._application) === null || _a === void 0 ? void 0 : _a.getChannelProcessor('control')) === undefined) {\n                    return;\n                }\n                if (gamepads[gamepad] === null && this._activeGamepads[gamepad] === true) {\n                    (_b = this._application) === null || _b === void 0 ? void 0 : _b.getChannelProcessor('control').sendGamepadRemoved(gamepad);\n                    this._activeGamepads[gamepad] = false;\n                    return;\n                }\n                if (gamepads[gamepad] !== null && this._activeGamepads[gamepad] === false) {\n                    (_c = this._application) === null || _c === void 0 ? void 0 : _c.getChannelProcessor('control').sendGamepadAdded(gamepad);\n                    this._activeGamepads[gamepad] = true;\n                    return;\n                }\n            }\n        }, 500);\n    }\n    stop() {\n        // console.log('xStreamingPlayer Driver/Gamepad.ts - Stop collecting events:', this._gamepads)\n        clearInterval(this._activeGamepadsInterval);\n    }\n    onKeyChange(e, down) {\n        switch (e.key) {\n            case KEYCODE_KEY_N:\n                this._nexusOverrideN = down;\n                break;\n        }\n    }\n    pressButtonStart(button) {\n        var _a;\n        console.log('pressButtonStart:', button);\n        this._isVirtualButtonPressing = true;\n        this._shadowGamepad[button] = 1;\n        (_a = this._application) === null || _a === void 0 ? void 0 : _a.getChannelProcessor('input').queueGamepadState(this._shadowGamepad);\n    }\n    pressButtonEnd(button) {\n        var _a;\n        console.log('pressButtonEnd:', button);\n        this._shadowGamepad[button] = 0;\n        (_a = this._application) === null || _a === void 0 ? void 0 : _a.getChannelProcessor('input').queueGamepadState(this._shadowGamepad);\n        this._isVirtualButtonPressing = false;\n    }\n    // left stick move\n    moveLeftStick(x, y) {\n        var _a;\n        if (x !== 0 || y !== 0) {\n            this._isVirtualButtonPressing = true;\n        }\n        else {\n            this._isVirtualButtonPressing = false;\n        }\n        this._shadowGamepad.LeftThumbXAxis = x;\n        this._shadowGamepad.LeftThumbYAxis = -y;\n        (_a = this._application) === null || _a === void 0 ? void 0 : _a.getChannelProcessor('input').queueGamepadState(this._shadowGamepad);\n    }\n    // right stick move\n    moveRightStick(x, y) {\n        var _a;\n        if (x !== 0 || y !== 0) {\n            this._isVirtualButtonPressing = true;\n        }\n        else {\n            this._isVirtualButtonPressing = false;\n        }\n        this._shadowGamepad.RightThumbXAxis = x;\n        this._shadowGamepad.RightThumbYAxis = -y;\n        (_a = this._application) === null || _a === void 0 ? void 0 : _a.getChannelProcessor('input').queueGamepadState(this._shadowGamepad);\n    }\n    // Only ran when new gamepad driver is selected\n    run() {\n        var _a, _b, _c;\n        let gpState;\n        if (((_a = this._application) === null || _a === void 0 ? void 0 : _a._gamepad_kernal) === 'Native') {\n            gpState = [globalThis.gpState];\n        }\n        else {\n            gpState = this.requestStates();\n            if (gpState[0] !== undefined) {\n                if (this._nexusOverrideN === true) {\n                    gpState[0].Nexus = 1;\n                }\n            }\n        }\n        if (!this._isVirtualButtonPressing) {\n            (_b = this._application) === null || _b === void 0 ? void 0 : _b.getChannelProcessor('input')._inputFps.count();\n            (_c = this._application) === null || _c === void 0 ? void 0 : _c.getChannelProcessor('input').queueGamepadStates(gpState);\n        }\n        // requestAnimationFrame(() => { this.run() })\n        setTimeout(() => { this.run(); }, 1000 / 120);\n    }\n    requestStates() {\n        const states = [];\n        const gamepads = navigator.getGamepads();\n        for (let gamepad = 0; gamepad < gamepads.length; gamepad++) {\n            const gamepadState = gamepads[gamepad];\n            if (gamepadState !== null && gamepadState.connected) {\n                const state = this.mapStateLabels(gamepadState.buttons, gamepadState.axes);\n                state.GamepadIndex = gamepadState.index;\n                states.push(state);\n            }\n        }\n        return states;\n    }\n    normaliseAxis(value) {\n        if (this._application) {\n            if (Math.abs(value) < this._application._gamepad_deadzone) {\n                return 0;\n            }\n            value = value - Math.sign(value) * this._application._gamepad_deadzone;\n            value /= (1.0 - this._application._gamepad_deadzone);\n            return value;\n        }\n        else {\n            return value;\n        }\n    }\n    getDefaultFamepadFrame() {\n        return {\n            Nexus: 0,\n            Menu: 0,\n            View: 0,\n            A: 0,\n            B: 0,\n            X: 0,\n            Y: 0,\n            DPadUp: 0,\n            DPadDown: 0,\n            DPadLeft: 0,\n            DPadRight: 0,\n            LeftShoulder: 0,\n            RightShoulder: 0,\n            LeftThumb: 0,\n            RightThumb: 0,\n            LeftThumbXAxis: 0,\n            LeftThumbYAxis: 0,\n            RightThumbXAxis: 0,\n            RightThumbYAxis: 0,\n            LeftTrigger: 0,\n            RightTrigger: 0,\n        };\n    }\n    mapStateLabels(buttons, axes) {\n        const frame = this.getDefaultFamepadFrame();\n        let maping = this._gamepad_mapping;\n        if (this._application && this._application._custom_gamepad_mapping) {\n            maping = this._application._custom_gamepad_mapping;\n        }\n        // Set buttons\n        for (const button in maping) {\n            // NOTE: Some devices dont have nexus button, gamepad.buttons return only 15 length\n            if (buttons[maping[button]]) {\n                frame[button] = buttons[maping[button]].value || 0;\n            }\n        }\n        // Set axis\n        for (const axis in this._gamepad_axes_mapping) {\n            frame[axis] = this.normaliseAxis(axes[this._gamepad_axes_mapping[axis]]);\n        }\n        // Start + Select Nexus menu workaround\n        if (frame.View > 0 && frame.Menu > 0) {\n            frame.View = 0;\n            frame.Menu = 0;\n            frame.Nexus = 1;\n        }\n        return frame;\n    }\n}\nexports[\"default\"] = GamepadDriver;\n//# sourceMappingURL=Gamepad.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Driver/Gamepad.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Driver/Keyboard.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Driver/Keyboard.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MouseKeyboardConfig = void 0;\nconst KEYCODE_ARROW_LEFT = 'ArrowLeft';\nconst KEYCODE_ARROW_UP = 'ArrowUp';\nconst KEYCODE_ARROW_RIGHT = 'ArrowRight';\nconst KEYCODE_ARROW_DOWN = 'ArrowDown';\nconst KEYCODE_KEY_A = 'a';\nconst KEYCODE_ENTER = 'Enter';\nconst KEYCODE_KEY_B = 'b';\nconst KEYCODE_BACKSPACE = 'Backspace';\nconst KEYCODE_KEY_X = 'x';\nconst KEYCODE_KEY_Y = 'y';\nconst KEYCODE_KEY_N = 'n';\nconst KEYCODE_KEY_LEFT_BRACKET = '[';\nconst KEYCODE_KEY_RIGHT_BRACKET = ']';\nconst KEYCODE_KEY_V = 'v';\nconst KEYCODE_KEY_M = 'm';\nconst KEYCODE_MINUS = '-';\nconst KEYCODE_EQUALS = '=';\nclass MouseKeyboardConfig {\n    constructor(args) {\n        if (args.keymapping === undefined) {\n            this._keymapping = MouseKeyboardConfig.defaultMapping();\n        }\n        else {\n            this._keymapping = args.keymapping;\n        }\n    }\n    static defaultMapping() {\n        return {\n            [KEYCODE_ARROW_LEFT]: 'DPadLeft',\n            [KEYCODE_ARROW_UP]: 'DPadUp',\n            [KEYCODE_ARROW_RIGHT]: 'DPadRight',\n            [KEYCODE_ARROW_DOWN]: 'DPadDown',\n            [KEYCODE_ENTER]: 'A',\n            [KEYCODE_KEY_A]: 'A',\n            [KEYCODE_BACKSPACE]: 'B',\n            [KEYCODE_KEY_B]: 'B',\n            [KEYCODE_KEY_X]: 'X',\n            [KEYCODE_KEY_Y]: 'Y',\n            [KEYCODE_KEY_LEFT_BRACKET]: 'LeftShoulder',\n            [KEYCODE_KEY_RIGHT_BRACKET]: 'RightShoulder',\n            [KEYCODE_MINUS]: 'LeftTrigger',\n            [KEYCODE_EQUALS]: 'RightTrigger',\n            [KEYCODE_KEY_V]: 'View',\n            [KEYCODE_KEY_M]: 'Menu',\n            [KEYCODE_KEY_N]: 'Nexus',\n        };\n    }\n    static default() {\n        return new MouseKeyboardConfig({});\n    }\n}\nexports.MouseKeyboardConfig = MouseKeyboardConfig;\nclass KeyboardDriver {\n    constructor(mouseKeyboardConfig) {\n        this._keyboardState = {\n            GamepadIndex: 0,\n            Nexus: 0,\n            Menu: 0,\n            View: 0,\n            A: 0,\n            B: 0,\n            X: 0,\n            Y: 0,\n            DPadUp: 0,\n            DPadDown: 0,\n            DPadLeft: 0,\n            DPadRight: 0,\n            LeftShoulder: 0,\n            RightShoulder: 0,\n            LeftThumb: 0,\n            RightThumb: 0,\n            LeftThumbXAxis: 0.0,\n            LeftThumbYAxis: 0.0,\n            RightThumbXAxis: 0.0,\n            RightThumbYAxis: 0.0,\n            LeftTrigger: 0.0,\n            RightTrigger: 0.0,\n        };\n        this._downFunc = (e) => { this.onKeyChange(e, true); };\n        this._upFunc = (e) => { this.onKeyChange(e, false); };\n        this._mouseKeyboardConfig = mouseKeyboardConfig;\n        console.log('MouseConfig /// ', this._mouseKeyboardConfig);\n    }\n    start() {\n        window.addEventListener('keydown', this._downFunc);\n        window.addEventListener('keyup', this._upFunc);\n    }\n    stop() {\n        window.removeEventListener('keydown', this._downFunc);\n        window.removeEventListener('keyup', this._upFunc);\n    }\n    onKeyDown(e) { this.onKeyChange(e, true); }\n    onKeyUp(e) { this.onKeyChange(e, false); }\n    onKeyChange(e, down) {\n        const val = down ? 1 : 0;\n        const mappedButton = this._mouseKeyboardConfig._keymapping[e.key];\n        if (mappedButton === undefined) {\n            return;\n        }\n        this._keyboardState[mappedButton] = val;\n    }\n    requestState() {\n        return this._keyboardState;\n    }\n    pressButton(button) {\n        this._keyboardState[button] = 1;\n        setTimeout(() => {\n            this._keyboardState[button] = 0;\n        }, 60);\n    }\n}\nexports[\"default\"] = KeyboardDriver;\n//# sourceMappingURL=Keyboard.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvRHJpdmVyL0tleWJvYXJkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy94c3RyZWFtaW5nLXBsYXllci9kaXN0L0RyaXZlci9LZXlib2FyZC5qcz82YThiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb3VzZUtleWJvYXJkQ29uZmlnID0gdm9pZCAwO1xuY29uc3QgS0VZQ09ERV9BUlJPV19MRUZUID0gJ0Fycm93TGVmdCc7XG5jb25zdCBLRVlDT0RFX0FSUk9XX1VQID0gJ0Fycm93VXAnO1xuY29uc3QgS0VZQ09ERV9BUlJPV19SSUdIVCA9ICdBcnJvd1JpZ2h0JztcbmNvbnN0IEtFWUNPREVfQVJST1dfRE9XTiA9ICdBcnJvd0Rvd24nO1xuY29uc3QgS0VZQ09ERV9LRVlfQSA9ICdhJztcbmNvbnN0IEtFWUNPREVfRU5URVIgPSAnRW50ZXInO1xuY29uc3QgS0VZQ09ERV9LRVlfQiA9ICdiJztcbmNvbnN0IEtFWUNPREVfQkFDS1NQQUNFID0gJ0JhY2tzcGFjZSc7XG5jb25zdCBLRVlDT0RFX0tFWV9YID0gJ3gnO1xuY29uc3QgS0VZQ09ERV9LRVlfWSA9ICd5JztcbmNvbnN0IEtFWUNPREVfS0VZX04gPSAnbic7XG5jb25zdCBLRVlDT0RFX0tFWV9MRUZUX0JSQUNLRVQgPSAnWyc7XG5jb25zdCBLRVlDT0RFX0tFWV9SSUdIVF9CUkFDS0VUID0gJ10nO1xuY29uc3QgS0VZQ09ERV9LRVlfViA9ICd2JztcbmNvbnN0IEtFWUNPREVfS0VZX00gPSAnbSc7XG5jb25zdCBLRVlDT0RFX01JTlVTID0gJy0nO1xuY29uc3QgS0VZQ09ERV9FUVVBTFMgPSAnPSc7XG5jbGFzcyBNb3VzZUtleWJvYXJkQ29uZmlnIHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIGlmIChhcmdzLmtleW1hcHBpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fa2V5bWFwcGluZyA9IE1vdXNlS2V5Ym9hcmRDb25maWcuZGVmYXVsdE1hcHBpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2tleW1hcHBpbmcgPSBhcmdzLmtleW1hcHBpbmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGRlZmF1bHRNYXBwaW5nKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgW0tFWUNPREVfQVJST1dfTEVGVF06ICdEUGFkTGVmdCcsXG4gICAgICAgICAgICBbS0VZQ09ERV9BUlJPV19VUF06ICdEUGFkVXAnLFxuICAgICAgICAgICAgW0tFWUNPREVfQVJST1dfUklHSFRdOiAnRFBhZFJpZ2h0JyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0FSUk9XX0RPV05dOiAnRFBhZERvd24nLFxuICAgICAgICAgICAgW0tFWUNPREVfRU5URVJdOiAnQScsXG4gICAgICAgICAgICBbS0VZQ09ERV9LRVlfQV06ICdBJyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0JBQ0tTUEFDRV06ICdCJyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0tFWV9CXTogJ0InLFxuICAgICAgICAgICAgW0tFWUNPREVfS0VZX1hdOiAnWCcsXG4gICAgICAgICAgICBbS0VZQ09ERV9LRVlfWV06ICdZJyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0tFWV9MRUZUX0JSQUNLRVRdOiAnTGVmdFNob3VsZGVyJyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0tFWV9SSUdIVF9CUkFDS0VUXTogJ1JpZ2h0U2hvdWxkZXInLFxuICAgICAgICAgICAgW0tFWUNPREVfTUlOVVNdOiAnTGVmdFRyaWdnZXInLFxuICAgICAgICAgICAgW0tFWUNPREVfRVFVQUxTXTogJ1JpZ2h0VHJpZ2dlcicsXG4gICAgICAgICAgICBbS0VZQ09ERV9LRVlfVl06ICdWaWV3JyxcbiAgICAgICAgICAgIFtLRVlDT0RFX0tFWV9NXTogJ01lbnUnLFxuICAgICAgICAgICAgW0tFWUNPREVfS0VZX05dOiAnTmV4dXMnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNb3VzZUtleWJvYXJkQ29uZmlnKHt9KTtcbiAgICB9XG59XG5leHBvcnRzLk1vdXNlS2V5Ym9hcmRDb25maWcgPSBNb3VzZUtleWJvYXJkQ29uZmlnO1xuY2xhc3MgS2V5Ym9hcmREcml2ZXIge1xuICAgIGNvbnN0cnVjdG9yKG1vdXNlS2V5Ym9hcmRDb25maWcpIHtcbiAgICAgICAgdGhpcy5fa2V5Ym9hcmRTdGF0ZSA9IHtcbiAgICAgICAgICAgIEdhbWVwYWRJbmRleDogMCxcbiAgICAgICAgICAgIE5leHVzOiAwLFxuICAgICAgICAgICAgTWVudTogMCxcbiAgICAgICAgICAgIFZpZXc6IDAsXG4gICAgICAgICAgICBBOiAwLFxuICAgICAgICAgICAgQjogMCxcbiAgICAgICAgICAgIFg6IDAsXG4gICAgICAgICAgICBZOiAwLFxuICAgICAgICAgICAgRFBhZFVwOiAwLFxuICAgICAgICAgICAgRFBhZERvd246IDAsXG4gICAgICAgICAgICBEUGFkTGVmdDogMCxcbiAgICAgICAgICAgIERQYWRSaWdodDogMCxcbiAgICAgICAgICAgIExlZnRTaG91bGRlcjogMCxcbiAgICAgICAgICAgIFJpZ2h0U2hvdWxkZXI6IDAsXG4gICAgICAgICAgICBMZWZ0VGh1bWI6IDAsXG4gICAgICAgICAgICBSaWdodFRodW1iOiAwLFxuICAgICAgICAgICAgTGVmdFRodW1iWEF4aXM6IDAuMCxcbiAgICAgICAgICAgIExlZnRUaHVtYllBeGlzOiAwLjAsXG4gICAgICAgICAgICBSaWdodFRodW1iWEF4aXM6IDAuMCxcbiAgICAgICAgICAgIFJpZ2h0VGh1bWJZQXhpczogMC4wLFxuICAgICAgICAgICAgTGVmdFRyaWdnZXI6IDAuMCxcbiAgICAgICAgICAgIFJpZ2h0VHJpZ2dlcjogMC4wLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9kb3duRnVuYyA9IChlKSA9PiB7IHRoaXMub25LZXlDaGFuZ2UoZSwgdHJ1ZSk7IH07XG4gICAgICAgIHRoaXMuX3VwRnVuYyA9IChlKSA9PiB7IHRoaXMub25LZXlDaGFuZ2UoZSwgZmFsc2UpOyB9O1xuICAgICAgICB0aGlzLl9tb3VzZUtleWJvYXJkQ29uZmlnID0gbW91c2VLZXlib2FyZENvbmZpZztcbiAgICAgICAgY29uc29sZS5sb2coJ01vdXNlQ29uZmlnIC8vLyAnLCB0aGlzLl9tb3VzZUtleWJvYXJkQ29uZmlnKTtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fZG93bkZ1bmMpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl91cEZ1bmMpO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2Rvd25GdW5jKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fdXBGdW5jKTtcbiAgICB9XG4gICAgb25LZXlEb3duKGUpIHsgdGhpcy5vbktleUNoYW5nZShlLCB0cnVlKTsgfVxuICAgIG9uS2V5VXAoZSkgeyB0aGlzLm9uS2V5Q2hhbmdlKGUsIGZhbHNlKTsgfVxuICAgIG9uS2V5Q2hhbmdlKGUsIGRvd24pIHtcbiAgICAgICAgY29uc3QgdmFsID0gZG93biA/IDEgOiAwO1xuICAgICAgICBjb25zdCBtYXBwZWRCdXR0b24gPSB0aGlzLl9tb3VzZUtleWJvYXJkQ29uZmlnLl9rZXltYXBwaW5nW2Uua2V5XTtcbiAgICAgICAgaWYgKG1hcHBlZEJ1dHRvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fa2V5Ym9hcmRTdGF0ZVttYXBwZWRCdXR0b25dID0gdmFsO1xuICAgIH1cbiAgICByZXF1ZXN0U3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlib2FyZFN0YXRlO1xuICAgIH1cbiAgICBwcmVzc0J1dHRvbihidXR0b24pIHtcbiAgICAgICAgdGhpcy5fa2V5Ym9hcmRTdGF0ZVtidXR0b25dID0gMTtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9rZXlib2FyZFN0YXRlW2J1dHRvbl0gPSAwO1xuICAgICAgICB9LCA2MCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gS2V5Ym9hcmREcml2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1LZXlib2FyZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Driver/Keyboard.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Helper/EventBus.js":
/*!*****************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Helper/EventBus.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"../node_modules/events/events.js\"));\nclass EventBus extends events_1.default {\n}\nexports[\"default\"] = EventBus;\n//# sourceMappingURL=EventBus.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvSGVscGVyL0V2ZW50QnVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUNBQWlDLG1CQUFPLENBQUMsZ0RBQVE7QUFDakQ7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy94c3RyZWFtaW5nLXBsYXllci9kaXN0L0hlbHBlci9FdmVudEJ1cy5qcz9hMTdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXZlbnRzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImV2ZW50c1wiKSk7XG5jbGFzcyBFdmVudEJ1cyBleHRlbmRzIGV2ZW50c18xLmRlZmF1bHQge1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRCdXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudEJ1cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Helper/EventBus.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/Helper/FpsCounter.js":
/*!*******************************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/Helper/FpsCounter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass FpsCounter {\n    constructor(application, name) {\n        this._counter = 0;\n        this._name = name;\n        this._application = application;\n    }\n    start() {\n        this._eventInterval = setInterval(() => {\n            // console.log('xStreamingPlayer Helper/FpsCounter.ts [fps_'+this._name+'] - Emit fps:', this._counter)\n            this._application.getEventBus().emit('fps_' + this._name, {\n                fps: this._counter,\n            });\n            this._counter = 0;\n        }, 1000);\n    }\n    stop() {\n        clearInterval(this._eventInterval);\n    }\n    count() {\n        this._counter++;\n    }\n}\nexports[\"default\"] = FpsCounter;\n//# sourceMappingURL=FpsCounter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvSGVscGVyL0Zwc0NvdW50ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL3hzdHJlYW1pbmctcGxheWVyL2Rpc3QvSGVscGVyL0Zwc0NvdW50ZXIuanM/YjdlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNsYXNzIEZwc0NvdW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKGFwcGxpY2F0aW9uLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fYXBwbGljYXRpb24gPSBhcHBsaWNhdGlvbjtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygneFN0cmVhbWluZ1BsYXllciBIZWxwZXIvRnBzQ291bnRlci50cyBbZnBzXycrdGhpcy5fbmFtZSsnXSAtIEVtaXQgZnBzOicsIHRoaXMuX2NvdW50ZXIpXG4gICAgICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbi5nZXRFdmVudEJ1cygpLmVtaXQoJ2Zwc18nICsgdGhpcy5fbmFtZSwge1xuICAgICAgICAgICAgICAgIGZwczogdGhpcy5fY291bnRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY291bnRlciA9IDA7XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgICBzdG9wKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2V2ZW50SW50ZXJ2YWwpO1xuICAgIH1cbiAgICBjb3VudCgpIHtcbiAgICAgICAgdGhpcy5fY291bnRlcisrO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEZwc0NvdW50ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GcHNDb3VudGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/Helper/FpsCounter.js\n"));

/***/ }),

/***/ "../node_modules/xstreaming-player/dist/index.js":
/*!*******************************************************!*\
  !*** ../node_modules/xstreaming-player/dist/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// import DebugChannel from './Channel/Debug'\nconst Input_1 = __importDefault(__webpack_require__(/*! ./Channel/Input */ \"../node_modules/xstreaming-player/dist/Channel/Input.js\"));\nconst Control_1 = __importDefault(__webpack_require__(/*! ./Channel/Control */ \"../node_modules/xstreaming-player/dist/Channel/Control.js\"));\nconst Message_1 = __importDefault(__webpack_require__(/*! ./Channel/Message */ \"../node_modules/xstreaming-player/dist/Channel/Message.js\"));\nconst Chat_1 = __importDefault(__webpack_require__(/*! ./Channel/Chat */ \"../node_modules/xstreaming-player/dist/Channel/Chat.js\"));\nconst Video_1 = __importDefault(__webpack_require__(/*! ./Component/Video */ \"../node_modules/xstreaming-player/dist/Component/Video.js\"));\nconst Audio_1 = __importDefault(__webpack_require__(/*! ./Component/Audio */ \"../node_modules/xstreaming-player/dist/Component/Audio.js\"));\nconst EventBus_1 = __importDefault(__webpack_require__(/*! ./Helper/EventBus */ \"../node_modules/xstreaming-player/dist/Helper/EventBus.js\"));\nconst Gamepad_1 = __importDefault(__webpack_require__(/*! ./Driver/Gamepad */ \"../node_modules/xstreaming-player/dist/Driver/Gamepad.js\"));\nconst Keyboard_1 = __importStar(__webpack_require__(/*! ./Driver/Keyboard */ \"../node_modules/xstreaming-player/dist/Driver/Keyboard.js\"));\nglobalThis._lastStat = null;\nclass xStreamingPlayer {\n    constructor(elementId, config = {}) {\n        this._isResetting = false;\n        this._webrtcConfiguration = {\n            iceServers: [\n                {\n                    urls: 'stun:worldaz.relay.teams.microsoft.com:3478',\n                },\n                {\n                    urls: 'stun:stun.l.google.com:19302',\n                },\n                {\n                    urls: 'stun:stun1.l.google.com:19302',\n                },\n                {\n                    urls: 'stun:relay1.expressturn.com',\n                },\n                {\n                    urls: 'stun:relay2.expressturn.com',\n                },\n                {\n                    urls: 'stun:stun.kinesisvideo.us-east-1.amazonaws.com:443',\n                },\n                {\n                    urls: 'stun:stun.douyucdn.cn:18000',\n                },\n            ],\n        };\n        this._webrtcDataChannelsConfig = {\n            'input': {\n                ordered: true,\n                protocol: '1.0',\n            },\n            'chat': {\n                protocol: 'chatV1',\n            },\n            'control': {\n                protocol: 'controlV1',\n            },\n            'message': {\n                protocol: 'messageV1',\n            },\n        };\n        this._webrtcStates = {\n            iceGathering: 'open',\n            iceConnection: 'open',\n            iceCandidates: [],\n            streamConnection: 'open',\n        };\n        this._webrtcDataChannels = {};\n        this._webrtcChannelProcessors = {};\n        this._iceCandidates = [];\n        this._inputDriver = undefined;\n        this._keyboardDriver = undefined;\n        this._codecPreference = '';\n        this._codecProfiles = [];\n        this._maxVideoBitrate = 0;\n        this._maxAudioBitrate = 0;\n        this._vibration = true;\n        this._video_format = '';\n        this._gamepad_kernal = 'Native';\n        this._vibration_mode = 'Native';\n        this._gamepad_deadzone = 0.2;\n        this._custom_gamepad_mapping = null;\n        console.log('xStreamingPlayer loaded!');\n        this._config = Object.assign({\n            input_touch: false,\n            input_mousekeyboard: false,\n            input_legacykeyboard: true,\n        }, config);\n        this._eventBus = new EventBus_1.default();\n        this._elementHolder = elementId;\n        this._elementHolderRandom = (Math.floor(Math.random() * 100) + 1);\n    }\n    bind() {\n        var _a;\n        this._webrtcClient = new RTCPeerConnection(this._webrtcConfiguration);\n        this._openDataChannels();\n        if (this._config.input_driver === undefined) {\n            this._inputDriver = new Gamepad_1.default();\n        }\n        else if (this._config.input_driver !== null) {\n            this._inputDriver = this._config.input_driver;\n        }\n        this._inputDriver.setApplication(this);\n        this._keyboardDriver = new Keyboard_1.default((_a = this._config.input_mousekeyboard_config) !== null && _a !== void 0 ? _a : Keyboard_1.MouseKeyboardConfig.default());\n        this._gatherIce();\n        this._webrtcClient.ontrack = (event) => {\n            if (event.track.kind === 'video') {\n                this._videoComponent = new Video_1.default(this);\n                this._videoComponent.create(event.streams[0]);\n            }\n            else if (event.track.kind === 'audio') {\n                this._audioComponent = new Audio_1.default(this);\n                this._audioComponent.create(event.streams[0]);\n            }\n            else {\n                console.log('Unknown Track kind: ', event.track.kind);\n            }\n        };\n        this._webrtcClient.addTransceiver('audio', {\n            direction: 'sendrecv',\n        });\n        this._webrtcClient.addTransceiver('video', {\n            direction: 'recvonly',\n        });\n        this._webrtcClient.addEventListener('connectionstatechange', () => {\n            var _a, _b, _c, _d;\n            console.log('connectionstatechange:', (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.connectionState);\n            if (((_b = this._webrtcClient) === null || _b === void 0 ? void 0 : _b.connectionState) === 'connected') {\n                this.getEventBus().emit('connectionstate', { state: (_c = this._webrtcClient) === null || _c === void 0 ? void 0 : _c.connectionState });\n            }\n            if (((_d = this._webrtcClient) === null || _d === void 0 ? void 0 : _d.connectionState) === 'failed') {\n                console.log('restartIce');\n                this._webrtcClient.restartIce();\n                if (this._connectFailHandler) {\n                    this._connectFailHandler();\n                }\n            }\n        });\n    }\n    createOffer() {\n        return new Promise((resolve, reject) => {\n            if (this._webrtcClient === undefined) {\n                reject('webRTC client not started yet. Run .bind() first.');\n                return;\n            }\n            this.getEventBus().emit('connectionstate', { state: 'new' });\n            this._webrtcClient.createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true,\n            }).then((offer) => {\n                var _a, _b;\n                // Set Codec\n                if (this._codecPreference !== '' && offer.sdp) {\n                    console.log('xStreamingPlayer index.ts - createOffer() Set codec preference mimetype to:', this._codecPreference);\n                    offer.sdp = this._setCodec(offer.sdp, this._codecPreference, this._codecProfiles);\n                }\n                // Set bitrate\n                if (this._maxVideoBitrate > 0) {\n                    console.log('xStreamingPlayer index.ts - createOffer() Set max video bitrate to:', this._maxVideoBitrate, 'kbps');\n                    offer.sdp = this._setBitrate(offer.sdp, 'video', this._maxVideoBitrate);\n                }\n                if (this._maxAudioBitrate > 0) {\n                    console.log('xStreamingPlayer index.ts - createOffer() Set max audio bitrate to:', this._maxVideoBitrate, 'kbps');\n                    offer.sdp = this._setBitrate(offer.sdp, 'audio', this._maxAudioBitrate);\n                }\n                if ((this._config.sound_force_mono || false) !== true) {\n                    console.log('xStreamingPlayer index.ts - createOffer() Set audio to stereo');\n                    offer.sdp = (_a = offer.sdp) === null || _a === void 0 ? void 0 : _a.replace('useinbandfec=1', 'useinbandfec=1; stereo=1');\n                }\n                (_b = this._webrtcClient) === null || _b === void 0 ? void 0 : _b.setLocalDescription(offer);\n                resolve(offer);\n            });\n        });\n    }\n    sdpNegotiationChat() {\n        this.createOffer().then((offer) => {\n            this._sdpHandler(this, offer);\n        });\n    }\n    setSdpHandler(listener) {\n        this._sdpHandler = listener;\n    }\n    setAudioBitrate(bitrate_kbps) {\n        this._maxAudioBitrate = bitrate_kbps;\n    }\n    setVideoBitrate(bitrate_kbps) {\n        this._maxVideoBitrate = bitrate_kbps;\n    }\n    setControllerRumble(state) {\n        this.getChannelProcessor('input')._rumbleEnabled = state;\n    }\n    _setBitrate(sdp, media, bitrate) {\n        const lines = sdp.split('\\n');\n        let line = -1;\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].indexOf('m=' + media) === 0) {\n                line = i;\n                break;\n            }\n        }\n        if (line === -1) {\n            console.debug('Could not find the m line for', media);\n            return sdp;\n        }\n        line++;\n        while (lines[line].indexOf('i=') === 0 || lines[line].indexOf('c=') === 0) {\n            line++;\n        }\n        if (lines[line].indexOf('b') === 0) {\n            lines[line] = 'b=AS:' + bitrate;\n            return lines.join('\\n');\n        }\n        let newLines = lines.slice(0, line);\n        newLines.push('b=AS:' + bitrate);\n        newLines = newLines.concat(lines.slice(line, lines.length));\n        return newLines.join('\\n');\n    }\n    setVideoFormat(format) {\n        this._video_format = format;\n    }\n    setCodecPreferences(mimeType, options) {\n        this._codecPreference = mimeType;\n        if (options) {\n            this._codecProfiles = options.profiles;\n        }\n    }\n    setGamepadKernal(kernal) {\n        this._gamepad_kernal = kernal;\n    }\n    setVibration(isVibrated) {\n        this._vibration = isVibrated;\n    }\n    setVibrationMode(mode) {\n        this._vibration_mode = mode;\n    }\n    // _gamepad_deadzone\n    setGamepadDeadZone(value) {\n        this._gamepad_deadzone = value;\n    }\n    setGamepadMaping(maping) {\n        this._custom_gamepad_mapping = maping;\n    }\n    _setCodec(sdp, mimeType, codecProfiles) {\n        var _a;\n        const capabilities = RTCRtpReceiver.getCapabilities('video');\n        if (capabilities === null) {\n            console.log('xStreamingPlayer index.ts - _setCodec() Failed to get video codecs');\n        }\n        else {\n            const codecs = capabilities.codecs;\n            const prefCodecs = [];\n            for (let i = 0; i < codecs.length; i++) {\n                if (codecs[i].mimeType === mimeType) {\n                    if (codecProfiles.length > 0) {\n                        for (let j = 0; j < codecProfiles.length; j++) {\n                            if (((_a = codecs[i].sdpFmtpLine) === null || _a === void 0 ? void 0 : _a.indexOf('profile-level-id=' + codecProfiles[j])) !== -1) {\n                                console.log('xStreamingPlayer index.ts - Adding codec as preference:', codecs[i], codecProfiles[j]);\n                                prefCodecs.push(codecs[i]);\n                            }\n                        }\n                    }\n                    else {\n                        console.log('xStreamingPlayer index.ts - Adding codec as preference:', codecs[i]);\n                        prefCodecs.push(codecs[i]);\n                    }\n                }\n            }\n            if (prefCodecs.length === 0) {\n                console.log('xStreamingPlayer index.ts - _setCodec() No video codec matches with mimetype:', mimeType);\n                return sdp;\n            }\n            console.log('mimeType:', mimeType);\n            // FIX H.264 codec\n            if (mimeType.indexOf('H264') > -1) {\n                // High=4d Medium=42e Low=420\n                const h264Pattern = /a=fmtp:(\\d+).*profile-level-id=([0-9a-f]{6})/g;\n                const profilePrefix = codecProfiles[0];\n                const preferredCodecIds = [];\n                // Find all H.264 codec profile IDs\n                const matches = sdp.matchAll(h264Pattern) || [];\n                for (const match of matches) {\n                    const id = match[1];\n                    const profileId = match[2];\n                    if (profileId.startsWith(profilePrefix)) {\n                        preferredCodecIds.push(id);\n                    }\n                }\n                // No preferred IDs found\n                if (!preferredCodecIds.length) {\n                    return sdp;\n                }\n                const lines = sdp.split('\\r\\n');\n                for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n                    const line = lines[lineIndex];\n                    if (!line.startsWith('m=video')) {\n                        continue;\n                    }\n                    // https://datatracker.ietf.org/doc/html/rfc4566#section-5.14\n                    // m=<media> <port> <proto> <fmt>\n                    // m=video 9 UDP/TLS/RTP/SAVPF 127 39 102 104 106 108\n                    const tmp = line.trim().split(' ');\n                    // Get array of <fmt>\n                    // ['127', '39', '102', '104', '106', '108']\n                    let ids = tmp.slice(3);\n                    // Remove preferred IDs in the original array\n                    ids = ids.filter(item => !preferredCodecIds.includes(item));\n                    // Put preferred IDs at the beginning\n                    ids = preferredCodecIds.concat(ids);\n                    // Update line's content\n                    lines[lineIndex] = tmp.slice(0, 3).concat(ids).join(' ');\n                    break;\n                }\n                return lines.join('\\r\\n');\n            }\n        }\n    }\n    setRemoteOffer(sdpdata) {\n        var _a;\n        try {\n            (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.setRemoteDescription({\n                type: 'answer',\n                sdp: sdpdata,\n            });\n        }\n        catch (e) {\n            console.log('xStreamingPlayer index.ts - setRemoteOffer() Remote SDP is not valid:', sdpdata);\n        }\n        this.getEventBus().emit('connectionstate', { state: 'connecting' });\n    }\n    reset() {\n        var _a;\n        if (!this._isResetting) {\n            this._isResetting = true;\n            (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.close();\n            if (this._audioComponent) {\n                this._audioComponent.destroy();\n            }\n            if (this._videoComponent) {\n                this._videoComponent.destroy();\n            }\n            for (const name in this._webrtcChannelProcessors) {\n                this._webrtcChannelProcessors[name].destroy();\n            }\n            this._inputDriver.stop();\n            this._keyboardDriver.stop();\n            this._webrtcClient = new RTCPeerConnection(this._webrtcConfiguration);\n            this._openDataChannels();\n            this._inputDriver.start();\n            this._keyboardDriver.start();\n            this._gatherIce();\n            this._isResetting = false;\n        }\n    }\n    close() {\n        var _a;\n        if (!this._isResetting) {\n            this._isResetting = true;\n            (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.close();\n            if (this._audioComponent) {\n                this._audioComponent.destroy();\n            }\n            if (this._videoComponent) {\n                this._videoComponent.destroy();\n            }\n            for (const name in this._webrtcChannelProcessors) {\n                this._webrtcChannelProcessors[name].destroy();\n            }\n            this._webrtcChannelProcessors = {};\n            this._inputDriver.stop();\n            this._keyboardDriver.stop();\n        }\n    }\n    getIceCandidates() {\n        return this._iceCandidates;\n    }\n    setIceCandidates(iceDetails) {\n        var _a;\n        if (iceDetails.length === 0) {\n            window.alert('Error: No candidates received!');\n        }\n        for (const candidate in iceDetails) {\n            if (iceDetails[candidate].candidate === 'a=end-of-candidates') {\n                // iceDetails[candidate].candidate = ''\n                continue;\n            }\n            (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.addIceCandidate({\n                candidate: iceDetails[candidate].candidate,\n                sdpMid: iceDetails[candidate].sdpMid,\n                sdpMLineIndex: iceDetails[candidate].sdpMLineIndex,\n            });\n        }\n    }\n    setConnectFailHandler(listener) {\n        this._connectFailHandler = listener;\n    }\n    getChannel(name) {\n        return this._webrtcDataChannels[name];\n    }\n    _openDataChannels() {\n        for (const channel in this._webrtcDataChannelsConfig) {\n            this._openDataChannel(channel, this._webrtcDataChannelsConfig[channel]);\n        }\n    }\n    _openDataChannel(name, config) {\n        var _a;\n        console.log('xStreamingPlayer index.ts - Creating data channel:', name, config);\n        this._webrtcDataChannels[name] = (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.createDataChannel(name, config);\n        switch (name) {\n            case 'input':\n                this._webrtcChannelProcessors[name] = new Input_1.default('input', this);\n                break;\n            case 'control':\n                this._webrtcChannelProcessors[name] = new Control_1.default('control', this);\n                break;\n            case 'chat':\n                this._webrtcChannelProcessors[name] = new Chat_1.default('chat', this);\n                break;\n            case 'message':\n                this._webrtcChannelProcessors[name] = new Message_1.default('message', this);\n                break;\n        }\n        // Setup channel processors\n        this._webrtcDataChannels[name].addEventListener('open', (event) => {\n            // const message = event.data;\n            if (this._webrtcChannelProcessors[name] !== undefined && this._webrtcChannelProcessors[name].onOpen !== undefined) {\n                this._webrtcChannelProcessors[name].onOpen(event);\n            }\n            else {\n                console.log('xStreamingPlayer index.ts - [' + name + '] Got open channel:', event);\n            }\n        });\n        this._webrtcDataChannels[name].addEventListener('message', event => {\n            // const message = new Uint8Array(event.data);\n            if (this._webrtcChannelProcessors[name] !== undefined && this._webrtcChannelProcessors[name].onMessage !== undefined) {\n                this._webrtcChannelProcessors[name].onMessage(event);\n            }\n            else {\n                console.log('xStreamingPlayer index.ts - [' + name + '] Received channel message:', event);\n            }\n        });\n        this._webrtcDataChannels[name].addEventListener('closing', event => {\n            // const message = event.data;\n            if (this._webrtcChannelProcessors[name] !== undefined && this._webrtcChannelProcessors[name].onClosing !== undefined) {\n                this._webrtcChannelProcessors[name].onClosing(event);\n            }\n            else {\n                console.log('xStreamingPlayer index.ts - [' + name + '] Got closing channel:', event);\n            }\n        });\n        this._webrtcDataChannels[name].addEventListener('close', event => {\n            // const message = event.data;\n            if (this._webrtcChannelProcessors[name] !== undefined && this._webrtcChannelProcessors[name].onClose !== undefined) {\n                this._webrtcChannelProcessors[name].onClose(event);\n            }\n            else {\n                console.log('xStreamingPlayer index.ts - [' + name + '] Got close channel:', event);\n            }\n        });\n        this._webrtcDataChannels[name].addEventListener('error', event => {\n            // const message = event.data;\n            if (this._webrtcChannelProcessors[name] !== undefined && this._webrtcChannelProcessors[name].onError !== undefined) {\n                this._webrtcChannelProcessors[name].onError(event);\n            }\n            else {\n                console.log('xStreamingPlayer index.ts - [' + name + '] Got error channel:', event);\n            }\n        });\n        // Check if we have a video connection\n        if (name === 'input') {\n            this._webrtcChannelProcessors[name].addEventListener('state', (event) => {\n                this._webrtcStates.streamConnection = event.state;\n                this.getEventBus().emit('connectionstate', { state: event.state });\n                console.log('xStreamingPlayer index.ts - [' + name + '] Channel state changed to:', event);\n            });\n        }\n    }\n    _gatherIce() {\n        var _a;\n        (_a = this._webrtcClient) === null || _a === void 0 ? void 0 : _a.addEventListener('icecandidate', event => {\n            if (event.candidate) {\n                console.log('xStreamingPlayer index.ts - ICE candidate found:', event.candidate);\n                this._iceCandidates.push(event.candidate);\n            }\n        });\n    }\n    getDataChannel(name) {\n        return this._webrtcDataChannels[name];\n    }\n    getChannelProcessor(name) {\n        return this._webrtcChannelProcessors[name];\n    }\n    getEventBus() {\n        return this._eventBus;\n    }\n    getStreamState() {\n        return new Promise(resove => {\n            const performances = {\n                resolution: globalThis.resolution,\n                rtt: '-1 (-1%)',\n                fps: 0,\n                pl: '-1 (-1%)',\n                fl: '-1 (-1%)',\n                br: '',\n                decode: '',\n            };\n            if (this._webrtcClient) {\n                this._webrtcClient.getStats().then(stats => {\n                    stats.forEach(stat => {\n                        if (stat.type === 'inbound-rtp' && stat.kind === 'video') {\n                            // FPS\n                            performances.fps = stat.framesPerSecond || 0;\n                            // Frames Dropped\n                            const framesDropped = stat.framesDropped;\n                            if (framesDropped !== undefined) {\n                                const framesReceived = stat.framesReceived;\n                                const framesDroppedPercentage = (framesDropped * 100 / ((framesDropped + framesReceived) || 1)).toFixed(2);\n                                performances.fl = `${framesDropped} (${framesDroppedPercentage}%)`;\n                            }\n                            else {\n                                performances.fl = '-1 (-1%)';\n                            }\n                            // Packets Lost\n                            const packetsLost = stat.packetsLost;\n                            if (packetsLost !== undefined) {\n                                const packetsReceived = stat.packetsReceived;\n                                const packetsLostPercentage = (packetsLost * 100 / ((packetsLost + packetsReceived) || 1)).toFixed(2);\n                                performances.pl = `${packetsLost} (${packetsLostPercentage}%)`;\n                            }\n                            else {\n                                performances.pl = '-1 (-1%)';\n                            }\n                            if (globalThis._lastStat) {\n                                try {\n                                    const lastStat = globalThis._lastStat;\n                                    // Bitrate\n                                    const timeDiff = stat.timestamp - lastStat.timestamp;\n                                    if (timeDiff !== 0) {\n                                        const bitrate = 8 * (stat.bytesReceived - lastStat.bytesReceived) / timeDiff / 1000;\n                                        performances.br = `${bitrate.toFixed(2)} Mbps`;\n                                    }\n                                    else {\n                                        performances.br = '--';\n                                    }\n                                    // Decode time\n                                    // Show decode time is a bug on Chromium based browsers on Android,so just reduce it.\n                                    // Refer: https://github.com/redphx/better-xcloud/discussions/113\n                                    const totalDecodeTimeDiff = stat.totalDecodeTime - lastStat.totalDecodeTime;\n                                    const framesDecodedDiff = stat.framesDecoded - lastStat.framesDecoded;\n                                    if (framesDecodedDiff !== 0) {\n                                        let currentDecodeTime = totalDecodeTimeDiff / framesDecodedDiff * 1000;\n                                        // Fix decode time incorrect in webview\n                                        if (currentDecodeTime > 20) {\n                                            currentDecodeTime -= 20;\n                                        }\n                                        if (currentDecodeTime > 18) {\n                                            currentDecodeTime -= 15;\n                                        }\n                                        performances.decode = `${currentDecodeTime.toFixed(2)}ms`;\n                                    }\n                                    else {\n                                        performances.decode = '--';\n                                    }\n                                }\n                                catch (e) {\n                                    console.log('err:', e);\n                                }\n                            }\n                            globalThis._lastStat = stat;\n                        }\n                        else if (stat.type === 'candidate-pair' && stat.state === 'succeeded') {\n                            // Round Trip Time\n                            const roundTripTime = typeof stat.currentRoundTripTime !== 'undefined' ? stat.currentRoundTripTime * 1000 : '???';\n                            performances.rtt = `${roundTripTime}ms`;\n                        }\n                    });\n                    resove(performances);\n                });\n            }\n        });\n    }\n}\nexports[\"default\"] = xStreamingPlayer;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/xstreaming-player/dist/index.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["pages/_app","main"], () => (__webpack_exec__("../node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?absolutePagePath=%2FUsers%2Flijiahao%2FDesktop%2Flijiahao%2Fmy-git%2FXStreaming-desktop%2Frenderer%2Fpages%2Fstream%2F%5Bserverid%5D.tsx&page=%2Fstream%2F%5Bserverid%5D!")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);